//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 671 files.
  struct file {
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `baijiaxing.json`.
    static let baijiaxingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "baijiaxing", pathExtension: "json")
    /// Resource file `ci.song.rank.0.json`.
    static let ciSongRank0Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.0", pathExtension: "json")
    /// Resource file `ci.song.rank.1000.json`.
    static let ciSongRank1000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.1000", pathExtension: "json")
    /// Resource file `ci.song.rank.10000.json`.
    static let ciSongRank10000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.10000", pathExtension: "json")
    /// Resource file `ci.song.rank.11000.json`.
    static let ciSongRank11000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.11000", pathExtension: "json")
    /// Resource file `ci.song.rank.12000.json`.
    static let ciSongRank12000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.12000", pathExtension: "json")
    /// Resource file `ci.song.rank.13000.json`.
    static let ciSongRank13000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.13000", pathExtension: "json")
    /// Resource file `ci.song.rank.14000.json`.
    static let ciSongRank14000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.14000", pathExtension: "json")
    /// Resource file `ci.song.rank.15000.json`.
    static let ciSongRank15000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.15000", pathExtension: "json")
    /// Resource file `ci.song.rank.16000.json`.
    static let ciSongRank16000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.16000", pathExtension: "json")
    /// Resource file `ci.song.rank.17000.json`.
    static let ciSongRank17000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.17000", pathExtension: "json")
    /// Resource file `ci.song.rank.18000.json`.
    static let ciSongRank18000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.18000", pathExtension: "json")
    /// Resource file `ci.song.rank.19000.json`.
    static let ciSongRank19000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.19000", pathExtension: "json")
    /// Resource file `ci.song.rank.2000.json`.
    static let ciSongRank2000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.2000", pathExtension: "json")
    /// Resource file `ci.song.rank.20000.json`.
    static let ciSongRank20000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.20000", pathExtension: "json")
    /// Resource file `ci.song.rank.2019y.json`.
    static let ciSongRank2019yJson = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.2019y", pathExtension: "json")
    /// Resource file `ci.song.rank.21000.json`.
    static let ciSongRank21000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.21000", pathExtension: "json")
    /// Resource file `ci.song.rank.3000.json`.
    static let ciSongRank3000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.3000", pathExtension: "json")
    /// Resource file `ci.song.rank.4000.json`.
    static let ciSongRank4000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.4000", pathExtension: "json")
    /// Resource file `ci.song.rank.5000.json`.
    static let ciSongRank5000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.5000", pathExtension: "json")
    /// Resource file `ci.song.rank.6000.json`.
    static let ciSongRank6000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.6000", pathExtension: "json")
    /// Resource file `ci.song.rank.7000.json`.
    static let ciSongRank7000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.7000", pathExtension: "json")
    /// Resource file `ci.song.rank.8000.json`.
    static let ciSongRank8000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.8000", pathExtension: "json")
    /// Resource file `ci.song.rank.9000.json`.
    static let ciSongRank9000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "ci.song.rank.9000", pathExtension: "json")
    /// Resource file `daxue.json`.
    static let daxueJson = Rswift.FileResource(bundle: R.hostingBundle, name: "daxue", pathExtension: "json")
    /// Resource file `dizigui.json`.
    static let diziguiJson = Rswift.FileResource(bundle: R.hostingBundle, name: "dizigui", pathExtension: "json")
    /// Resource file `guwenguanzhi.json`.
    static let guwenguanzhiJson = Rswift.FileResource(bundle: R.hostingBundle, name: "guwenguanzhi", pathExtension: "json")
    /// Resource file `lunyu.json`.
    static let lunyuJson = Rswift.FileResource(bundle: R.hostingBundle, name: "lunyu", pathExtension: "json")
    /// Resource file `mengzi.json`.
    static let mengziJson = Rswift.FileResource(bundle: R.hostingBundle, name: "mengzi", pathExtension: "json")
    /// Resource file `poet.song.0.json`.
    static let poetSong0Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.0", pathExtension: "json")
    /// Resource file `poet.song.1000.json`.
    static let poetSong1000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.1000", pathExtension: "json")
    /// Resource file `poet.song.10000.json`.
    static let poetSong10000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.10000", pathExtension: "json")
    /// Resource file `poet.song.100000.json`.
    static let poetSong100000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.100000", pathExtension: "json")
    /// Resource file `poet.song.101000.json`.
    static let poetSong101000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.101000", pathExtension: "json")
    /// Resource file `poet.song.102000.json`.
    static let poetSong102000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.102000", pathExtension: "json")
    /// Resource file `poet.song.103000.json`.
    static let poetSong103000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.103000", pathExtension: "json")
    /// Resource file `poet.song.104000.json`.
    static let poetSong104000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.104000", pathExtension: "json")
    /// Resource file `poet.song.105000.json`.
    static let poetSong105000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.105000", pathExtension: "json")
    /// Resource file `poet.song.106000.json`.
    static let poetSong106000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.106000", pathExtension: "json")
    /// Resource file `poet.song.107000.json`.
    static let poetSong107000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.107000", pathExtension: "json")
    /// Resource file `poet.song.108000.json`.
    static let poetSong108000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.108000", pathExtension: "json")
    /// Resource file `poet.song.109000.json`.
    static let poetSong109000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.109000", pathExtension: "json")
    /// Resource file `poet.song.11000.json`.
    static let poetSong11000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.11000", pathExtension: "json")
    /// Resource file `poet.song.110000.json`.
    static let poetSong110000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.110000", pathExtension: "json")
    /// Resource file `poet.song.111000.json`.
    static let poetSong111000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.111000", pathExtension: "json")
    /// Resource file `poet.song.112000.json`.
    static let poetSong112000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.112000", pathExtension: "json")
    /// Resource file `poet.song.113000.json`.
    static let poetSong113000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.113000", pathExtension: "json")
    /// Resource file `poet.song.114000.json`.
    static let poetSong114000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.114000", pathExtension: "json")
    /// Resource file `poet.song.115000.json`.
    static let poetSong115000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.115000", pathExtension: "json")
    /// Resource file `poet.song.116000.json`.
    static let poetSong116000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.116000", pathExtension: "json")
    /// Resource file `poet.song.117000.json`.
    static let poetSong117000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.117000", pathExtension: "json")
    /// Resource file `poet.song.118000.json`.
    static let poetSong118000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.118000", pathExtension: "json")
    /// Resource file `poet.song.119000.json`.
    static let poetSong119000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.119000", pathExtension: "json")
    /// Resource file `poet.song.12000.json`.
    static let poetSong12000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.12000", pathExtension: "json")
    /// Resource file `poet.song.120000.json`.
    static let poetSong120000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.120000", pathExtension: "json")
    /// Resource file `poet.song.121000.json`.
    static let poetSong121000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.121000", pathExtension: "json")
    /// Resource file `poet.song.122000.json`.
    static let poetSong122000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.122000", pathExtension: "json")
    /// Resource file `poet.song.123000.json`.
    static let poetSong123000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.123000", pathExtension: "json")
    /// Resource file `poet.song.124000.json`.
    static let poetSong124000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.124000", pathExtension: "json")
    /// Resource file `poet.song.125000.json`.
    static let poetSong125000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.125000", pathExtension: "json")
    /// Resource file `poet.song.126000.json`.
    static let poetSong126000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.126000", pathExtension: "json")
    /// Resource file `poet.song.127000.json`.
    static let poetSong127000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.127000", pathExtension: "json")
    /// Resource file `poet.song.128000.json`.
    static let poetSong128000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.128000", pathExtension: "json")
    /// Resource file `poet.song.129000.json`.
    static let poetSong129000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.129000", pathExtension: "json")
    /// Resource file `poet.song.13000.json`.
    static let poetSong13000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.13000", pathExtension: "json")
    /// Resource file `poet.song.130000.json`.
    static let poetSong130000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.130000", pathExtension: "json")
    /// Resource file `poet.song.131000.json`.
    static let poetSong131000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.131000", pathExtension: "json")
    /// Resource file `poet.song.132000.json`.
    static let poetSong132000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.132000", pathExtension: "json")
    /// Resource file `poet.song.133000.json`.
    static let poetSong133000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.133000", pathExtension: "json")
    /// Resource file `poet.song.134000.json`.
    static let poetSong134000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.134000", pathExtension: "json")
    /// Resource file `poet.song.135000.json`.
    static let poetSong135000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.135000", pathExtension: "json")
    /// Resource file `poet.song.136000.json`.
    static let poetSong136000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.136000", pathExtension: "json")
    /// Resource file `poet.song.137000.json`.
    static let poetSong137000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.137000", pathExtension: "json")
    /// Resource file `poet.song.138000.json`.
    static let poetSong138000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.138000", pathExtension: "json")
    /// Resource file `poet.song.139000.json`.
    static let poetSong139000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.139000", pathExtension: "json")
    /// Resource file `poet.song.14000.json`.
    static let poetSong14000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.14000", pathExtension: "json")
    /// Resource file `poet.song.140000.json`.
    static let poetSong140000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.140000", pathExtension: "json")
    /// Resource file `poet.song.141000.json`.
    static let poetSong141000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.141000", pathExtension: "json")
    /// Resource file `poet.song.142000.json`.
    static let poetSong142000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.142000", pathExtension: "json")
    /// Resource file `poet.song.143000.json`.
    static let poetSong143000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.143000", pathExtension: "json")
    /// Resource file `poet.song.144000.json`.
    static let poetSong144000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.144000", pathExtension: "json")
    /// Resource file `poet.song.145000.json`.
    static let poetSong145000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.145000", pathExtension: "json")
    /// Resource file `poet.song.146000.json`.
    static let poetSong146000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.146000", pathExtension: "json")
    /// Resource file `poet.song.147000.json`.
    static let poetSong147000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.147000", pathExtension: "json")
    /// Resource file `poet.song.148000.json`.
    static let poetSong148000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.148000", pathExtension: "json")
    /// Resource file `poet.song.149000.json`.
    static let poetSong149000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.149000", pathExtension: "json")
    /// Resource file `poet.song.15000.json`.
    static let poetSong15000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.15000", pathExtension: "json")
    /// Resource file `poet.song.150000.json`.
    static let poetSong150000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.150000", pathExtension: "json")
    /// Resource file `poet.song.151000.json`.
    static let poetSong151000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.151000", pathExtension: "json")
    /// Resource file `poet.song.152000.json`.
    static let poetSong152000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.152000", pathExtension: "json")
    /// Resource file `poet.song.153000.json`.
    static let poetSong153000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.153000", pathExtension: "json")
    /// Resource file `poet.song.154000.json`.
    static let poetSong154000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.154000", pathExtension: "json")
    /// Resource file `poet.song.155000.json`.
    static let poetSong155000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.155000", pathExtension: "json")
    /// Resource file `poet.song.156000.json`.
    static let poetSong156000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.156000", pathExtension: "json")
    /// Resource file `poet.song.157000.json`.
    static let poetSong157000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.157000", pathExtension: "json")
    /// Resource file `poet.song.158000.json`.
    static let poetSong158000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.158000", pathExtension: "json")
    /// Resource file `poet.song.159000.json`.
    static let poetSong159000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.159000", pathExtension: "json")
    /// Resource file `poet.song.16000.json`.
    static let poetSong16000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.16000", pathExtension: "json")
    /// Resource file `poet.song.160000.json`.
    static let poetSong160000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.160000", pathExtension: "json")
    /// Resource file `poet.song.161000.json`.
    static let poetSong161000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.161000", pathExtension: "json")
    /// Resource file `poet.song.162000.json`.
    static let poetSong162000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.162000", pathExtension: "json")
    /// Resource file `poet.song.163000.json`.
    static let poetSong163000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.163000", pathExtension: "json")
    /// Resource file `poet.song.164000.json`.
    static let poetSong164000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.164000", pathExtension: "json")
    /// Resource file `poet.song.165000.json`.
    static let poetSong165000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.165000", pathExtension: "json")
    /// Resource file `poet.song.166000.json`.
    static let poetSong166000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.166000", pathExtension: "json")
    /// Resource file `poet.song.167000.json`.
    static let poetSong167000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.167000", pathExtension: "json")
    /// Resource file `poet.song.168000.json`.
    static let poetSong168000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.168000", pathExtension: "json")
    /// Resource file `poet.song.169000.json`.
    static let poetSong169000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.169000", pathExtension: "json")
    /// Resource file `poet.song.17000.json`.
    static let poetSong17000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.17000", pathExtension: "json")
    /// Resource file `poet.song.170000.json`.
    static let poetSong170000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.170000", pathExtension: "json")
    /// Resource file `poet.song.171000.json`.
    static let poetSong171000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.171000", pathExtension: "json")
    /// Resource file `poet.song.172000.json`.
    static let poetSong172000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.172000", pathExtension: "json")
    /// Resource file `poet.song.173000.json`.
    static let poetSong173000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.173000", pathExtension: "json")
    /// Resource file `poet.song.174000.json`.
    static let poetSong174000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.174000", pathExtension: "json")
    /// Resource file `poet.song.175000.json`.
    static let poetSong175000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.175000", pathExtension: "json")
    /// Resource file `poet.song.176000.json`.
    static let poetSong176000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.176000", pathExtension: "json")
    /// Resource file `poet.song.177000.json`.
    static let poetSong177000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.177000", pathExtension: "json")
    /// Resource file `poet.song.178000.json`.
    static let poetSong178000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.178000", pathExtension: "json")
    /// Resource file `poet.song.179000.json`.
    static let poetSong179000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.179000", pathExtension: "json")
    /// Resource file `poet.song.18000.json`.
    static let poetSong18000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.18000", pathExtension: "json")
    /// Resource file `poet.song.180000.json`.
    static let poetSong180000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.180000", pathExtension: "json")
    /// Resource file `poet.song.181000.json`.
    static let poetSong181000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.181000", pathExtension: "json")
    /// Resource file `poet.song.182000.json`.
    static let poetSong182000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.182000", pathExtension: "json")
    /// Resource file `poet.song.183000.json`.
    static let poetSong183000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.183000", pathExtension: "json")
    /// Resource file `poet.song.184000.json`.
    static let poetSong184000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.184000", pathExtension: "json")
    /// Resource file `poet.song.185000.json`.
    static let poetSong185000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.185000", pathExtension: "json")
    /// Resource file `poet.song.186000.json`.
    static let poetSong186000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.186000", pathExtension: "json")
    /// Resource file `poet.song.187000.json`.
    static let poetSong187000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.187000", pathExtension: "json")
    /// Resource file `poet.song.188000.json`.
    static let poetSong188000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.188000", pathExtension: "json")
    /// Resource file `poet.song.189000.json`.
    static let poetSong189000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.189000", pathExtension: "json")
    /// Resource file `poet.song.19000.json`.
    static let poetSong19000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.19000", pathExtension: "json")
    /// Resource file `poet.song.190000.json`.
    static let poetSong190000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.190000", pathExtension: "json")
    /// Resource file `poet.song.191000.json`.
    static let poetSong191000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.191000", pathExtension: "json")
    /// Resource file `poet.song.192000.json`.
    static let poetSong192000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.192000", pathExtension: "json")
    /// Resource file `poet.song.193000.json`.
    static let poetSong193000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.193000", pathExtension: "json")
    /// Resource file `poet.song.194000.json`.
    static let poetSong194000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.194000", pathExtension: "json")
    /// Resource file `poet.song.195000.json`.
    static let poetSong195000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.195000", pathExtension: "json")
    /// Resource file `poet.song.196000.json`.
    static let poetSong196000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.196000", pathExtension: "json")
    /// Resource file `poet.song.197000.json`.
    static let poetSong197000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.197000", pathExtension: "json")
    /// Resource file `poet.song.198000.json`.
    static let poetSong198000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.198000", pathExtension: "json")
    /// Resource file `poet.song.199000.json`.
    static let poetSong199000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.199000", pathExtension: "json")
    /// Resource file `poet.song.2000.json`.
    static let poetSong2000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.2000", pathExtension: "json")
    /// Resource file `poet.song.20000.json`.
    static let poetSong20000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.20000", pathExtension: "json")
    /// Resource file `poet.song.200000.json`.
    static let poetSong200000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.200000", pathExtension: "json")
    /// Resource file `poet.song.201000.json`.
    static let poetSong201000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.201000", pathExtension: "json")
    /// Resource file `poet.song.202000.json`.
    static let poetSong202000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.202000", pathExtension: "json")
    /// Resource file `poet.song.203000.json`.
    static let poetSong203000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.203000", pathExtension: "json")
    /// Resource file `poet.song.204000.json`.
    static let poetSong204000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.204000", pathExtension: "json")
    /// Resource file `poet.song.205000.json`.
    static let poetSong205000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.205000", pathExtension: "json")
    /// Resource file `poet.song.206000.json`.
    static let poetSong206000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.206000", pathExtension: "json")
    /// Resource file `poet.song.207000.json`.
    static let poetSong207000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.207000", pathExtension: "json")
    /// Resource file `poet.song.208000.json`.
    static let poetSong208000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.208000", pathExtension: "json")
    /// Resource file `poet.song.209000.json`.
    static let poetSong209000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.209000", pathExtension: "json")
    /// Resource file `poet.song.21000.json`.
    static let poetSong21000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.21000", pathExtension: "json")
    /// Resource file `poet.song.210000.json`.
    static let poetSong210000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.210000", pathExtension: "json")
    /// Resource file `poet.song.211000.json`.
    static let poetSong211000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.211000", pathExtension: "json")
    /// Resource file `poet.song.212000.json`.
    static let poetSong212000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.212000", pathExtension: "json")
    /// Resource file `poet.song.213000.json`.
    static let poetSong213000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.213000", pathExtension: "json")
    /// Resource file `poet.song.214000.json`.
    static let poetSong214000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.214000", pathExtension: "json")
    /// Resource file `poet.song.215000.json`.
    static let poetSong215000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.215000", pathExtension: "json")
    /// Resource file `poet.song.216000.json`.
    static let poetSong216000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.216000", pathExtension: "json")
    /// Resource file `poet.song.217000.json`.
    static let poetSong217000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.217000", pathExtension: "json")
    /// Resource file `poet.song.218000.json`.
    static let poetSong218000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.218000", pathExtension: "json")
    /// Resource file `poet.song.219000.json`.
    static let poetSong219000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.219000", pathExtension: "json")
    /// Resource file `poet.song.22000.json`.
    static let poetSong22000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.22000", pathExtension: "json")
    /// Resource file `poet.song.220000.json`.
    static let poetSong220000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.220000", pathExtension: "json")
    /// Resource file `poet.song.221000.json`.
    static let poetSong221000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.221000", pathExtension: "json")
    /// Resource file `poet.song.222000.json`.
    static let poetSong222000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.222000", pathExtension: "json")
    /// Resource file `poet.song.223000.json`.
    static let poetSong223000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.223000", pathExtension: "json")
    /// Resource file `poet.song.224000.json`.
    static let poetSong224000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.224000", pathExtension: "json")
    /// Resource file `poet.song.225000.json`.
    static let poetSong225000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.225000", pathExtension: "json")
    /// Resource file `poet.song.226000.json`.
    static let poetSong226000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.226000", pathExtension: "json")
    /// Resource file `poet.song.227000.json`.
    static let poetSong227000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.227000", pathExtension: "json")
    /// Resource file `poet.song.228000.json`.
    static let poetSong228000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.228000", pathExtension: "json")
    /// Resource file `poet.song.229000.json`.
    static let poetSong229000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.229000", pathExtension: "json")
    /// Resource file `poet.song.23000.json`.
    static let poetSong23000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.23000", pathExtension: "json")
    /// Resource file `poet.song.230000.json`.
    static let poetSong230000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.230000", pathExtension: "json")
    /// Resource file `poet.song.231000.json`.
    static let poetSong231000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.231000", pathExtension: "json")
    /// Resource file `poet.song.232000.json`.
    static let poetSong232000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.232000", pathExtension: "json")
    /// Resource file `poet.song.233000.json`.
    static let poetSong233000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.233000", pathExtension: "json")
    /// Resource file `poet.song.234000.json`.
    static let poetSong234000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.234000", pathExtension: "json")
    /// Resource file `poet.song.235000.json`.
    static let poetSong235000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.235000", pathExtension: "json")
    /// Resource file `poet.song.236000.json`.
    static let poetSong236000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.236000", pathExtension: "json")
    /// Resource file `poet.song.237000.json`.
    static let poetSong237000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.237000", pathExtension: "json")
    /// Resource file `poet.song.238000.json`.
    static let poetSong238000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.238000", pathExtension: "json")
    /// Resource file `poet.song.239000.json`.
    static let poetSong239000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.239000", pathExtension: "json")
    /// Resource file `poet.song.24000.json`.
    static let poetSong24000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.24000", pathExtension: "json")
    /// Resource file `poet.song.240000.json`.
    static let poetSong240000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.240000", pathExtension: "json")
    /// Resource file `poet.song.241000.json`.
    static let poetSong241000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.241000", pathExtension: "json")
    /// Resource file `poet.song.242000.json`.
    static let poetSong242000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.242000", pathExtension: "json")
    /// Resource file `poet.song.243000.json`.
    static let poetSong243000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.243000", pathExtension: "json")
    /// Resource file `poet.song.244000.json`.
    static let poetSong244000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.244000", pathExtension: "json")
    /// Resource file `poet.song.245000.json`.
    static let poetSong245000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.245000", pathExtension: "json")
    /// Resource file `poet.song.246000.json`.
    static let poetSong246000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.246000", pathExtension: "json")
    /// Resource file `poet.song.247000.json`.
    static let poetSong247000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.247000", pathExtension: "json")
    /// Resource file `poet.song.248000.json`.
    static let poetSong248000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.248000", pathExtension: "json")
    /// Resource file `poet.song.249000.json`.
    static let poetSong249000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.249000", pathExtension: "json")
    /// Resource file `poet.song.25000.json`.
    static let poetSong25000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.25000", pathExtension: "json")
    /// Resource file `poet.song.250000.json`.
    static let poetSong250000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.250000", pathExtension: "json")
    /// Resource file `poet.song.251000.json`.
    static let poetSong251000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.251000", pathExtension: "json")
    /// Resource file `poet.song.252000.json`.
    static let poetSong252000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.252000", pathExtension: "json")
    /// Resource file `poet.song.253000.json`.
    static let poetSong253000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.253000", pathExtension: "json")
    /// Resource file `poet.song.254000.json`.
    static let poetSong254000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.254000", pathExtension: "json")
    /// Resource file `poet.song.26000.json`.
    static let poetSong26000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.26000", pathExtension: "json")
    /// Resource file `poet.song.27000.json`.
    static let poetSong27000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.27000", pathExtension: "json")
    /// Resource file `poet.song.28000.json`.
    static let poetSong28000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.28000", pathExtension: "json")
    /// Resource file `poet.song.29000.json`.
    static let poetSong29000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.29000", pathExtension: "json")
    /// Resource file `poet.song.3000.json`.
    static let poetSong3000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.3000", pathExtension: "json")
    /// Resource file `poet.song.30000.json`.
    static let poetSong30000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.30000", pathExtension: "json")
    /// Resource file `poet.song.31000.json`.
    static let poetSong31000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.31000", pathExtension: "json")
    /// Resource file `poet.song.32000.json`.
    static let poetSong32000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.32000", pathExtension: "json")
    /// Resource file `poet.song.33000.json`.
    static let poetSong33000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.33000", pathExtension: "json")
    /// Resource file `poet.song.34000.json`.
    static let poetSong34000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.34000", pathExtension: "json")
    /// Resource file `poet.song.35000.json`.
    static let poetSong35000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.35000", pathExtension: "json")
    /// Resource file `poet.song.36000.json`.
    static let poetSong36000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.36000", pathExtension: "json")
    /// Resource file `poet.song.37000.json`.
    static let poetSong37000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.37000", pathExtension: "json")
    /// Resource file `poet.song.38000.json`.
    static let poetSong38000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.38000", pathExtension: "json")
    /// Resource file `poet.song.39000.json`.
    static let poetSong39000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.39000", pathExtension: "json")
    /// Resource file `poet.song.4000.json`.
    static let poetSong4000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.4000", pathExtension: "json")
    /// Resource file `poet.song.40000.json`.
    static let poetSong40000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.40000", pathExtension: "json")
    /// Resource file `poet.song.41000.json`.
    static let poetSong41000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.41000", pathExtension: "json")
    /// Resource file `poet.song.42000.json`.
    static let poetSong42000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.42000", pathExtension: "json")
    /// Resource file `poet.song.43000.json`.
    static let poetSong43000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.43000", pathExtension: "json")
    /// Resource file `poet.song.44000.json`.
    static let poetSong44000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.44000", pathExtension: "json")
    /// Resource file `poet.song.45000.json`.
    static let poetSong45000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.45000", pathExtension: "json")
    /// Resource file `poet.song.46000.json`.
    static let poetSong46000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.46000", pathExtension: "json")
    /// Resource file `poet.song.47000.json`.
    static let poetSong47000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.47000", pathExtension: "json")
    /// Resource file `poet.song.48000.json`.
    static let poetSong48000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.48000", pathExtension: "json")
    /// Resource file `poet.song.49000.json`.
    static let poetSong49000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.49000", pathExtension: "json")
    /// Resource file `poet.song.5000.json`.
    static let poetSong5000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.5000", pathExtension: "json")
    /// Resource file `poet.song.50000.json`.
    static let poetSong50000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.50000", pathExtension: "json")
    /// Resource file `poet.song.51000.json`.
    static let poetSong51000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.51000", pathExtension: "json")
    /// Resource file `poet.song.52000.json`.
    static let poetSong52000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.52000", pathExtension: "json")
    /// Resource file `poet.song.53000.json`.
    static let poetSong53000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.53000", pathExtension: "json")
    /// Resource file `poet.song.54000.json`.
    static let poetSong54000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.54000", pathExtension: "json")
    /// Resource file `poet.song.55000.json`.
    static let poetSong55000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.55000", pathExtension: "json")
    /// Resource file `poet.song.56000.json`.
    static let poetSong56000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.56000", pathExtension: "json")
    /// Resource file `poet.song.57000.json`.
    static let poetSong57000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.57000", pathExtension: "json")
    /// Resource file `poet.song.58000.json`.
    static let poetSong58000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.58000", pathExtension: "json")
    /// Resource file `poet.song.59000.json`.
    static let poetSong59000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.59000", pathExtension: "json")
    /// Resource file `poet.song.6000.json`.
    static let poetSong6000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.6000", pathExtension: "json")
    /// Resource file `poet.song.60000.json`.
    static let poetSong60000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.60000", pathExtension: "json")
    /// Resource file `poet.song.61000.json`.
    static let poetSong61000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.61000", pathExtension: "json")
    /// Resource file `poet.song.62000.json`.
    static let poetSong62000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.62000", pathExtension: "json")
    /// Resource file `poet.song.63000.json`.
    static let poetSong63000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.63000", pathExtension: "json")
    /// Resource file `poet.song.64000.json`.
    static let poetSong64000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.64000", pathExtension: "json")
    /// Resource file `poet.song.65000.json`.
    static let poetSong65000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.65000", pathExtension: "json")
    /// Resource file `poet.song.66000.json`.
    static let poetSong66000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.66000", pathExtension: "json")
    /// Resource file `poet.song.67000.json`.
    static let poetSong67000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.67000", pathExtension: "json")
    /// Resource file `poet.song.68000.json`.
    static let poetSong68000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.68000", pathExtension: "json")
    /// Resource file `poet.song.69000.json`.
    static let poetSong69000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.69000", pathExtension: "json")
    /// Resource file `poet.song.7000.json`.
    static let poetSong7000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.7000", pathExtension: "json")
    /// Resource file `poet.song.70000.json`.
    static let poetSong70000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.70000", pathExtension: "json")
    /// Resource file `poet.song.71000.json`.
    static let poetSong71000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.71000", pathExtension: "json")
    /// Resource file `poet.song.72000.json`.
    static let poetSong72000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.72000", pathExtension: "json")
    /// Resource file `poet.song.73000.json`.
    static let poetSong73000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.73000", pathExtension: "json")
    /// Resource file `poet.song.74000.json`.
    static let poetSong74000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.74000", pathExtension: "json")
    /// Resource file `poet.song.75000.json`.
    static let poetSong75000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.75000", pathExtension: "json")
    /// Resource file `poet.song.76000.json`.
    static let poetSong76000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.76000", pathExtension: "json")
    /// Resource file `poet.song.77000.json`.
    static let poetSong77000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.77000", pathExtension: "json")
    /// Resource file `poet.song.78000.json`.
    static let poetSong78000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.78000", pathExtension: "json")
    /// Resource file `poet.song.79000.json`.
    static let poetSong79000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.79000", pathExtension: "json")
    /// Resource file `poet.song.8000.json`.
    static let poetSong8000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.8000", pathExtension: "json")
    /// Resource file `poet.song.80000.json`.
    static let poetSong80000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.80000", pathExtension: "json")
    /// Resource file `poet.song.81000.json`.
    static let poetSong81000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.81000", pathExtension: "json")
    /// Resource file `poet.song.82000.json`.
    static let poetSong82000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.82000", pathExtension: "json")
    /// Resource file `poet.song.83000.json`.
    static let poetSong83000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.83000", pathExtension: "json")
    /// Resource file `poet.song.84000.json`.
    static let poetSong84000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.84000", pathExtension: "json")
    /// Resource file `poet.song.85000.json`.
    static let poetSong85000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.85000", pathExtension: "json")
    /// Resource file `poet.song.86000.json`.
    static let poetSong86000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.86000", pathExtension: "json")
    /// Resource file `poet.song.87000.json`.
    static let poetSong87000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.87000", pathExtension: "json")
    /// Resource file `poet.song.88000.json`.
    static let poetSong88000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.88000", pathExtension: "json")
    /// Resource file `poet.song.89000.json`.
    static let poetSong89000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.89000", pathExtension: "json")
    /// Resource file `poet.song.9000.json`.
    static let poetSong9000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.9000", pathExtension: "json")
    /// Resource file `poet.song.90000.json`.
    static let poetSong90000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.90000", pathExtension: "json")
    /// Resource file `poet.song.91000.json`.
    static let poetSong91000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.91000", pathExtension: "json")
    /// Resource file `poet.song.92000.json`.
    static let poetSong92000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.92000", pathExtension: "json")
    /// Resource file `poet.song.93000.json`.
    static let poetSong93000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.93000", pathExtension: "json")
    /// Resource file `poet.song.94000.json`.
    static let poetSong94000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.94000", pathExtension: "json")
    /// Resource file `poet.song.95000.json`.
    static let poetSong95000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.95000", pathExtension: "json")
    /// Resource file `poet.song.96000.json`.
    static let poetSong96000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.96000", pathExtension: "json")
    /// Resource file `poet.song.97000.json`.
    static let poetSong97000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.97000", pathExtension: "json")
    /// Resource file `poet.song.98000.json`.
    static let poetSong98000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.98000", pathExtension: "json")
    /// Resource file `poet.song.99000.json`.
    static let poetSong99000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.99000", pathExtension: "json")
    /// Resource file `poet.song.rank.0.json`.
    static let poetSongRank0Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.0", pathExtension: "json")
    /// Resource file `poet.song.rank.1000.json`.
    static let poetSongRank1000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.1000", pathExtension: "json")
    /// Resource file `poet.song.rank.10000.json`.
    static let poetSongRank10000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.10000", pathExtension: "json")
    /// Resource file `poet.song.rank.100000.json`.
    static let poetSongRank100000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.100000", pathExtension: "json")
    /// Resource file `poet.song.rank.101000.json`.
    static let poetSongRank101000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.101000", pathExtension: "json")
    /// Resource file `poet.song.rank.102000.json`.
    static let poetSongRank102000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.102000", pathExtension: "json")
    /// Resource file `poet.song.rank.103000.json`.
    static let poetSongRank103000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.103000", pathExtension: "json")
    /// Resource file `poet.song.rank.104000.json`.
    static let poetSongRank104000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.104000", pathExtension: "json")
    /// Resource file `poet.song.rank.105000.json`.
    static let poetSongRank105000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.105000", pathExtension: "json")
    /// Resource file `poet.song.rank.106000.json`.
    static let poetSongRank106000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.106000", pathExtension: "json")
    /// Resource file `poet.song.rank.107000.json`.
    static let poetSongRank107000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.107000", pathExtension: "json")
    /// Resource file `poet.song.rank.108000.json`.
    static let poetSongRank108000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.108000", pathExtension: "json")
    /// Resource file `poet.song.rank.109000.json`.
    static let poetSongRank109000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.109000", pathExtension: "json")
    /// Resource file `poet.song.rank.11000.json`.
    static let poetSongRank11000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.11000", pathExtension: "json")
    /// Resource file `poet.song.rank.110000.json`.
    static let poetSongRank110000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.110000", pathExtension: "json")
    /// Resource file `poet.song.rank.111000.json`.
    static let poetSongRank111000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.111000", pathExtension: "json")
    /// Resource file `poet.song.rank.112000.json`.
    static let poetSongRank112000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.112000", pathExtension: "json")
    /// Resource file `poet.song.rank.113000.json`.
    static let poetSongRank113000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.113000", pathExtension: "json")
    /// Resource file `poet.song.rank.114000.json`.
    static let poetSongRank114000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.114000", pathExtension: "json")
    /// Resource file `poet.song.rank.115000.json`.
    static let poetSongRank115000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.115000", pathExtension: "json")
    /// Resource file `poet.song.rank.116000.json`.
    static let poetSongRank116000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.116000", pathExtension: "json")
    /// Resource file `poet.song.rank.117000.json`.
    static let poetSongRank117000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.117000", pathExtension: "json")
    /// Resource file `poet.song.rank.118000.json`.
    static let poetSongRank118000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.118000", pathExtension: "json")
    /// Resource file `poet.song.rank.119000.json`.
    static let poetSongRank119000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.119000", pathExtension: "json")
    /// Resource file `poet.song.rank.12000.json`.
    static let poetSongRank12000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.12000", pathExtension: "json")
    /// Resource file `poet.song.rank.120000.json`.
    static let poetSongRank120000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.120000", pathExtension: "json")
    /// Resource file `poet.song.rank.121000.json`.
    static let poetSongRank121000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.121000", pathExtension: "json")
    /// Resource file `poet.song.rank.122000.json`.
    static let poetSongRank122000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.122000", pathExtension: "json")
    /// Resource file `poet.song.rank.123000.json`.
    static let poetSongRank123000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.123000", pathExtension: "json")
    /// Resource file `poet.song.rank.124000.json`.
    static let poetSongRank124000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.124000", pathExtension: "json")
    /// Resource file `poet.song.rank.125000.json`.
    static let poetSongRank125000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.125000", pathExtension: "json")
    /// Resource file `poet.song.rank.126000.json`.
    static let poetSongRank126000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.126000", pathExtension: "json")
    /// Resource file `poet.song.rank.127000.json`.
    static let poetSongRank127000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.127000", pathExtension: "json")
    /// Resource file `poet.song.rank.128000.json`.
    static let poetSongRank128000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.128000", pathExtension: "json")
    /// Resource file `poet.song.rank.129000.json`.
    static let poetSongRank129000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.129000", pathExtension: "json")
    /// Resource file `poet.song.rank.13000.json`.
    static let poetSongRank13000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.13000", pathExtension: "json")
    /// Resource file `poet.song.rank.130000.json`.
    static let poetSongRank130000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.130000", pathExtension: "json")
    /// Resource file `poet.song.rank.131000.json`.
    static let poetSongRank131000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.131000", pathExtension: "json")
    /// Resource file `poet.song.rank.132000.json`.
    static let poetSongRank132000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.132000", pathExtension: "json")
    /// Resource file `poet.song.rank.133000.json`.
    static let poetSongRank133000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.133000", pathExtension: "json")
    /// Resource file `poet.song.rank.134000.json`.
    static let poetSongRank134000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.134000", pathExtension: "json")
    /// Resource file `poet.song.rank.135000.json`.
    static let poetSongRank135000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.135000", pathExtension: "json")
    /// Resource file `poet.song.rank.136000.json`.
    static let poetSongRank136000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.136000", pathExtension: "json")
    /// Resource file `poet.song.rank.137000.json`.
    static let poetSongRank137000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.137000", pathExtension: "json")
    /// Resource file `poet.song.rank.138000.json`.
    static let poetSongRank138000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.138000", pathExtension: "json")
    /// Resource file `poet.song.rank.139000.json`.
    static let poetSongRank139000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.139000", pathExtension: "json")
    /// Resource file `poet.song.rank.14000.json`.
    static let poetSongRank14000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.14000", pathExtension: "json")
    /// Resource file `poet.song.rank.140000.json`.
    static let poetSongRank140000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.140000", pathExtension: "json")
    /// Resource file `poet.song.rank.141000.json`.
    static let poetSongRank141000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.141000", pathExtension: "json")
    /// Resource file `poet.song.rank.142000.json`.
    static let poetSongRank142000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.142000", pathExtension: "json")
    /// Resource file `poet.song.rank.143000.json`.
    static let poetSongRank143000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.143000", pathExtension: "json")
    /// Resource file `poet.song.rank.144000.json`.
    static let poetSongRank144000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.144000", pathExtension: "json")
    /// Resource file `poet.song.rank.145000.json`.
    static let poetSongRank145000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.145000", pathExtension: "json")
    /// Resource file `poet.song.rank.146000.json`.
    static let poetSongRank146000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.146000", pathExtension: "json")
    /// Resource file `poet.song.rank.147000.json`.
    static let poetSongRank147000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.147000", pathExtension: "json")
    /// Resource file `poet.song.rank.148000.json`.
    static let poetSongRank148000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.148000", pathExtension: "json")
    /// Resource file `poet.song.rank.149000.json`.
    static let poetSongRank149000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.149000", pathExtension: "json")
    /// Resource file `poet.song.rank.15000.json`.
    static let poetSongRank15000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.15000", pathExtension: "json")
    /// Resource file `poet.song.rank.150000.json`.
    static let poetSongRank150000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.150000", pathExtension: "json")
    /// Resource file `poet.song.rank.151000.json`.
    static let poetSongRank151000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.151000", pathExtension: "json")
    /// Resource file `poet.song.rank.152000.json`.
    static let poetSongRank152000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.152000", pathExtension: "json")
    /// Resource file `poet.song.rank.153000.json`.
    static let poetSongRank153000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.153000", pathExtension: "json")
    /// Resource file `poet.song.rank.154000.json`.
    static let poetSongRank154000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.154000", pathExtension: "json")
    /// Resource file `poet.song.rank.155000.json`.
    static let poetSongRank155000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.155000", pathExtension: "json")
    /// Resource file `poet.song.rank.156000.json`.
    static let poetSongRank156000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.156000", pathExtension: "json")
    /// Resource file `poet.song.rank.157000.json`.
    static let poetSongRank157000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.157000", pathExtension: "json")
    /// Resource file `poet.song.rank.158000.json`.
    static let poetSongRank158000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.158000", pathExtension: "json")
    /// Resource file `poet.song.rank.159000.json`.
    static let poetSongRank159000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.159000", pathExtension: "json")
    /// Resource file `poet.song.rank.16000.json`.
    static let poetSongRank16000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.16000", pathExtension: "json")
    /// Resource file `poet.song.rank.160000.json`.
    static let poetSongRank160000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.160000", pathExtension: "json")
    /// Resource file `poet.song.rank.161000.json`.
    static let poetSongRank161000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.161000", pathExtension: "json")
    /// Resource file `poet.song.rank.162000.json`.
    static let poetSongRank162000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.162000", pathExtension: "json")
    /// Resource file `poet.song.rank.163000.json`.
    static let poetSongRank163000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.163000", pathExtension: "json")
    /// Resource file `poet.song.rank.164000.json`.
    static let poetSongRank164000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.164000", pathExtension: "json")
    /// Resource file `poet.song.rank.165000.json`.
    static let poetSongRank165000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.165000", pathExtension: "json")
    /// Resource file `poet.song.rank.166000.json`.
    static let poetSongRank166000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.166000", pathExtension: "json")
    /// Resource file `poet.song.rank.167000.json`.
    static let poetSongRank167000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.167000", pathExtension: "json")
    /// Resource file `poet.song.rank.168000.json`.
    static let poetSongRank168000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.168000", pathExtension: "json")
    /// Resource file `poet.song.rank.169000.json`.
    static let poetSongRank169000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.169000", pathExtension: "json")
    /// Resource file `poet.song.rank.17000.json`.
    static let poetSongRank17000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.17000", pathExtension: "json")
    /// Resource file `poet.song.rank.170000.json`.
    static let poetSongRank170000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.170000", pathExtension: "json")
    /// Resource file `poet.song.rank.171000.json`.
    static let poetSongRank171000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.171000", pathExtension: "json")
    /// Resource file `poet.song.rank.172000.json`.
    static let poetSongRank172000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.172000", pathExtension: "json")
    /// Resource file `poet.song.rank.173000.json`.
    static let poetSongRank173000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.173000", pathExtension: "json")
    /// Resource file `poet.song.rank.174000.json`.
    static let poetSongRank174000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.174000", pathExtension: "json")
    /// Resource file `poet.song.rank.175000.json`.
    static let poetSongRank175000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.175000", pathExtension: "json")
    /// Resource file `poet.song.rank.176000.json`.
    static let poetSongRank176000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.176000", pathExtension: "json")
    /// Resource file `poet.song.rank.177000.json`.
    static let poetSongRank177000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.177000", pathExtension: "json")
    /// Resource file `poet.song.rank.178000.json`.
    static let poetSongRank178000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.178000", pathExtension: "json")
    /// Resource file `poet.song.rank.179000.json`.
    static let poetSongRank179000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.179000", pathExtension: "json")
    /// Resource file `poet.song.rank.18000.json`.
    static let poetSongRank18000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.18000", pathExtension: "json")
    /// Resource file `poet.song.rank.180000.json`.
    static let poetSongRank180000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.180000", pathExtension: "json")
    /// Resource file `poet.song.rank.181000.json`.
    static let poetSongRank181000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.181000", pathExtension: "json")
    /// Resource file `poet.song.rank.182000.json`.
    static let poetSongRank182000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.182000", pathExtension: "json")
    /// Resource file `poet.song.rank.183000.json`.
    static let poetSongRank183000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.183000", pathExtension: "json")
    /// Resource file `poet.song.rank.184000.json`.
    static let poetSongRank184000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.184000", pathExtension: "json")
    /// Resource file `poet.song.rank.185000.json`.
    static let poetSongRank185000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.185000", pathExtension: "json")
    /// Resource file `poet.song.rank.186000.json`.
    static let poetSongRank186000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.186000", pathExtension: "json")
    /// Resource file `poet.song.rank.187000.json`.
    static let poetSongRank187000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.187000", pathExtension: "json")
    /// Resource file `poet.song.rank.188000.json`.
    static let poetSongRank188000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.188000", pathExtension: "json")
    /// Resource file `poet.song.rank.189000.json`.
    static let poetSongRank189000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.189000", pathExtension: "json")
    /// Resource file `poet.song.rank.19000.json`.
    static let poetSongRank19000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.19000", pathExtension: "json")
    /// Resource file `poet.song.rank.190000.json`.
    static let poetSongRank190000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.190000", pathExtension: "json")
    /// Resource file `poet.song.rank.191000.json`.
    static let poetSongRank191000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.191000", pathExtension: "json")
    /// Resource file `poet.song.rank.192000.json`.
    static let poetSongRank192000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.192000", pathExtension: "json")
    /// Resource file `poet.song.rank.193000.json`.
    static let poetSongRank193000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.193000", pathExtension: "json")
    /// Resource file `poet.song.rank.194000.json`.
    static let poetSongRank194000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.194000", pathExtension: "json")
    /// Resource file `poet.song.rank.195000.json`.
    static let poetSongRank195000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.195000", pathExtension: "json")
    /// Resource file `poet.song.rank.196000.json`.
    static let poetSongRank196000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.196000", pathExtension: "json")
    /// Resource file `poet.song.rank.197000.json`.
    static let poetSongRank197000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.197000", pathExtension: "json")
    /// Resource file `poet.song.rank.198000.json`.
    static let poetSongRank198000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.198000", pathExtension: "json")
    /// Resource file `poet.song.rank.199000.json`.
    static let poetSongRank199000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.199000", pathExtension: "json")
    /// Resource file `poet.song.rank.2000.json`.
    static let poetSongRank2000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.2000", pathExtension: "json")
    /// Resource file `poet.song.rank.20000.json`.
    static let poetSongRank20000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.20000", pathExtension: "json")
    /// Resource file `poet.song.rank.200000.json`.
    static let poetSongRank200000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.200000", pathExtension: "json")
    /// Resource file `poet.song.rank.201000.json`.
    static let poetSongRank201000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.201000", pathExtension: "json")
    /// Resource file `poet.song.rank.202000.json`.
    static let poetSongRank202000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.202000", pathExtension: "json")
    /// Resource file `poet.song.rank.203000.json`.
    static let poetSongRank203000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.203000", pathExtension: "json")
    /// Resource file `poet.song.rank.204000.json`.
    static let poetSongRank204000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.204000", pathExtension: "json")
    /// Resource file `poet.song.rank.205000.json`.
    static let poetSongRank205000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.205000", pathExtension: "json")
    /// Resource file `poet.song.rank.206000.json`.
    static let poetSongRank206000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.206000", pathExtension: "json")
    /// Resource file `poet.song.rank.207000.json`.
    static let poetSongRank207000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.207000", pathExtension: "json")
    /// Resource file `poet.song.rank.208000.json`.
    static let poetSongRank208000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.208000", pathExtension: "json")
    /// Resource file `poet.song.rank.209000.json`.
    static let poetSongRank209000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.209000", pathExtension: "json")
    /// Resource file `poet.song.rank.21000.json`.
    static let poetSongRank21000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.21000", pathExtension: "json")
    /// Resource file `poet.song.rank.210000.json`.
    static let poetSongRank210000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.210000", pathExtension: "json")
    /// Resource file `poet.song.rank.211000.json`.
    static let poetSongRank211000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.211000", pathExtension: "json")
    /// Resource file `poet.song.rank.212000.json`.
    static let poetSongRank212000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.212000", pathExtension: "json")
    /// Resource file `poet.song.rank.213000.json`.
    static let poetSongRank213000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.213000", pathExtension: "json")
    /// Resource file `poet.song.rank.214000.json`.
    static let poetSongRank214000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.214000", pathExtension: "json")
    /// Resource file `poet.song.rank.215000.json`.
    static let poetSongRank215000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.215000", pathExtension: "json")
    /// Resource file `poet.song.rank.216000.json`.
    static let poetSongRank216000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.216000", pathExtension: "json")
    /// Resource file `poet.song.rank.217000.json`.
    static let poetSongRank217000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.217000", pathExtension: "json")
    /// Resource file `poet.song.rank.218000.json`.
    static let poetSongRank218000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.218000", pathExtension: "json")
    /// Resource file `poet.song.rank.219000.json`.
    static let poetSongRank219000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.219000", pathExtension: "json")
    /// Resource file `poet.song.rank.22000.json`.
    static let poetSongRank22000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.22000", pathExtension: "json")
    /// Resource file `poet.song.rank.220000.json`.
    static let poetSongRank220000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.220000", pathExtension: "json")
    /// Resource file `poet.song.rank.221000.json`.
    static let poetSongRank221000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.221000", pathExtension: "json")
    /// Resource file `poet.song.rank.222000.json`.
    static let poetSongRank222000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.222000", pathExtension: "json")
    /// Resource file `poet.song.rank.223000.json`.
    static let poetSongRank223000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.223000", pathExtension: "json")
    /// Resource file `poet.song.rank.224000.json`.
    static let poetSongRank224000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.224000", pathExtension: "json")
    /// Resource file `poet.song.rank.225000.json`.
    static let poetSongRank225000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.225000", pathExtension: "json")
    /// Resource file `poet.song.rank.226000.json`.
    static let poetSongRank226000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.226000", pathExtension: "json")
    /// Resource file `poet.song.rank.227000.json`.
    static let poetSongRank227000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.227000", pathExtension: "json")
    /// Resource file `poet.song.rank.228000.json`.
    static let poetSongRank228000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.228000", pathExtension: "json")
    /// Resource file `poet.song.rank.229000.json`.
    static let poetSongRank229000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.229000", pathExtension: "json")
    /// Resource file `poet.song.rank.23000.json`.
    static let poetSongRank23000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.23000", pathExtension: "json")
    /// Resource file `poet.song.rank.230000.json`.
    static let poetSongRank230000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.230000", pathExtension: "json")
    /// Resource file `poet.song.rank.231000.json`.
    static let poetSongRank231000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.231000", pathExtension: "json")
    /// Resource file `poet.song.rank.232000.json`.
    static let poetSongRank232000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.232000", pathExtension: "json")
    /// Resource file `poet.song.rank.233000.json`.
    static let poetSongRank233000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.233000", pathExtension: "json")
    /// Resource file `poet.song.rank.234000.json`.
    static let poetSongRank234000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.234000", pathExtension: "json")
    /// Resource file `poet.song.rank.235000.json`.
    static let poetSongRank235000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.235000", pathExtension: "json")
    /// Resource file `poet.song.rank.236000.json`.
    static let poetSongRank236000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.236000", pathExtension: "json")
    /// Resource file `poet.song.rank.237000.json`.
    static let poetSongRank237000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.237000", pathExtension: "json")
    /// Resource file `poet.song.rank.238000.json`.
    static let poetSongRank238000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.238000", pathExtension: "json")
    /// Resource file `poet.song.rank.239000.json`.
    static let poetSongRank239000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.239000", pathExtension: "json")
    /// Resource file `poet.song.rank.24000.json`.
    static let poetSongRank24000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.24000", pathExtension: "json")
    /// Resource file `poet.song.rank.240000.json`.
    static let poetSongRank240000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.240000", pathExtension: "json")
    /// Resource file `poet.song.rank.241000.json`.
    static let poetSongRank241000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.241000", pathExtension: "json")
    /// Resource file `poet.song.rank.242000.json`.
    static let poetSongRank242000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.242000", pathExtension: "json")
    /// Resource file `poet.song.rank.243000.json`.
    static let poetSongRank243000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.243000", pathExtension: "json")
    /// Resource file `poet.song.rank.244000.json`.
    static let poetSongRank244000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.244000", pathExtension: "json")
    /// Resource file `poet.song.rank.245000.json`.
    static let poetSongRank245000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.245000", pathExtension: "json")
    /// Resource file `poet.song.rank.246000.json`.
    static let poetSongRank246000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.246000", pathExtension: "json")
    /// Resource file `poet.song.rank.247000.json`.
    static let poetSongRank247000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.247000", pathExtension: "json")
    /// Resource file `poet.song.rank.248000.json`.
    static let poetSongRank248000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.248000", pathExtension: "json")
    /// Resource file `poet.song.rank.249000.json`.
    static let poetSongRank249000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.249000", pathExtension: "json")
    /// Resource file `poet.song.rank.25000.json`.
    static let poetSongRank25000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.25000", pathExtension: "json")
    /// Resource file `poet.song.rank.250000.json`.
    static let poetSongRank250000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.250000", pathExtension: "json")
    /// Resource file `poet.song.rank.251000.json`.
    static let poetSongRank251000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.251000", pathExtension: "json")
    /// Resource file `poet.song.rank.252000.json`.
    static let poetSongRank252000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.252000", pathExtension: "json")
    /// Resource file `poet.song.rank.253000.json`.
    static let poetSongRank253000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.253000", pathExtension: "json")
    /// Resource file `poet.song.rank.254000.json`.
    static let poetSongRank254000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.254000", pathExtension: "json")
    /// Resource file `poet.song.rank.26000.json`.
    static let poetSongRank26000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.26000", pathExtension: "json")
    /// Resource file `poet.song.rank.27000.json`.
    static let poetSongRank27000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.27000", pathExtension: "json")
    /// Resource file `poet.song.rank.28000.json`.
    static let poetSongRank28000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.28000", pathExtension: "json")
    /// Resource file `poet.song.rank.29000.json`.
    static let poetSongRank29000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.29000", pathExtension: "json")
    /// Resource file `poet.song.rank.3000.json`.
    static let poetSongRank3000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.3000", pathExtension: "json")
    /// Resource file `poet.song.rank.30000.json`.
    static let poetSongRank30000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.30000", pathExtension: "json")
    /// Resource file `poet.song.rank.31000.json`.
    static let poetSongRank31000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.31000", pathExtension: "json")
    /// Resource file `poet.song.rank.32000.json`.
    static let poetSongRank32000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.32000", pathExtension: "json")
    /// Resource file `poet.song.rank.33000.json`.
    static let poetSongRank33000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.33000", pathExtension: "json")
    /// Resource file `poet.song.rank.34000.json`.
    static let poetSongRank34000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.34000", pathExtension: "json")
    /// Resource file `poet.song.rank.35000.json`.
    static let poetSongRank35000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.35000", pathExtension: "json")
    /// Resource file `poet.song.rank.36000.json`.
    static let poetSongRank36000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.36000", pathExtension: "json")
    /// Resource file `poet.song.rank.37000.json`.
    static let poetSongRank37000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.37000", pathExtension: "json")
    /// Resource file `poet.song.rank.38000.json`.
    static let poetSongRank38000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.38000", pathExtension: "json")
    /// Resource file `poet.song.rank.39000.json`.
    static let poetSongRank39000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.39000", pathExtension: "json")
    /// Resource file `poet.song.rank.4000.json`.
    static let poetSongRank4000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.4000", pathExtension: "json")
    /// Resource file `poet.song.rank.40000.json`.
    static let poetSongRank40000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.40000", pathExtension: "json")
    /// Resource file `poet.song.rank.41000.json`.
    static let poetSongRank41000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.41000", pathExtension: "json")
    /// Resource file `poet.song.rank.42000.json`.
    static let poetSongRank42000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.42000", pathExtension: "json")
    /// Resource file `poet.song.rank.43000.json`.
    static let poetSongRank43000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.43000", pathExtension: "json")
    /// Resource file `poet.song.rank.44000.json`.
    static let poetSongRank44000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.44000", pathExtension: "json")
    /// Resource file `poet.song.rank.45000.json`.
    static let poetSongRank45000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.45000", pathExtension: "json")
    /// Resource file `poet.song.rank.46000.json`.
    static let poetSongRank46000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.46000", pathExtension: "json")
    /// Resource file `poet.song.rank.47000.json`.
    static let poetSongRank47000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.47000", pathExtension: "json")
    /// Resource file `poet.song.rank.48000.json`.
    static let poetSongRank48000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.48000", pathExtension: "json")
    /// Resource file `poet.song.rank.49000.json`.
    static let poetSongRank49000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.49000", pathExtension: "json")
    /// Resource file `poet.song.rank.5000.json`.
    static let poetSongRank5000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.5000", pathExtension: "json")
    /// Resource file `poet.song.rank.50000.json`.
    static let poetSongRank50000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.50000", pathExtension: "json")
    /// Resource file `poet.song.rank.51000.json`.
    static let poetSongRank51000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.51000", pathExtension: "json")
    /// Resource file `poet.song.rank.52000.json`.
    static let poetSongRank52000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.52000", pathExtension: "json")
    /// Resource file `poet.song.rank.53000.json`.
    static let poetSongRank53000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.53000", pathExtension: "json")
    /// Resource file `poet.song.rank.54000.json`.
    static let poetSongRank54000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.54000", pathExtension: "json")
    /// Resource file `poet.song.rank.55000.json`.
    static let poetSongRank55000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.55000", pathExtension: "json")
    /// Resource file `poet.song.rank.56000.json`.
    static let poetSongRank56000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.56000", pathExtension: "json")
    /// Resource file `poet.song.rank.57000.json`.
    static let poetSongRank57000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.57000", pathExtension: "json")
    /// Resource file `poet.song.rank.58000.json`.
    static let poetSongRank58000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.58000", pathExtension: "json")
    /// Resource file `poet.song.rank.59000.json`.
    static let poetSongRank59000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.59000", pathExtension: "json")
    /// Resource file `poet.song.rank.6000.json`.
    static let poetSongRank6000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.6000", pathExtension: "json")
    /// Resource file `poet.song.rank.60000.json`.
    static let poetSongRank60000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.60000", pathExtension: "json")
    /// Resource file `poet.song.rank.61000.json`.
    static let poetSongRank61000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.61000", pathExtension: "json")
    /// Resource file `poet.song.rank.62000.json`.
    static let poetSongRank62000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.62000", pathExtension: "json")
    /// Resource file `poet.song.rank.63000.json`.
    static let poetSongRank63000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.63000", pathExtension: "json")
    /// Resource file `poet.song.rank.64000.json`.
    static let poetSongRank64000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.64000", pathExtension: "json")
    /// Resource file `poet.song.rank.65000.json`.
    static let poetSongRank65000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.65000", pathExtension: "json")
    /// Resource file `poet.song.rank.66000.json`.
    static let poetSongRank66000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.66000", pathExtension: "json")
    /// Resource file `poet.song.rank.67000.json`.
    static let poetSongRank67000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.67000", pathExtension: "json")
    /// Resource file `poet.song.rank.68000.json`.
    static let poetSongRank68000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.68000", pathExtension: "json")
    /// Resource file `poet.song.rank.69000.json`.
    static let poetSongRank69000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.69000", pathExtension: "json")
    /// Resource file `poet.song.rank.7000.json`.
    static let poetSongRank7000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.7000", pathExtension: "json")
    /// Resource file `poet.song.rank.70000.json`.
    static let poetSongRank70000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.70000", pathExtension: "json")
    /// Resource file `poet.song.rank.71000.json`.
    static let poetSongRank71000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.71000", pathExtension: "json")
    /// Resource file `poet.song.rank.72000.json`.
    static let poetSongRank72000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.72000", pathExtension: "json")
    /// Resource file `poet.song.rank.73000.json`.
    static let poetSongRank73000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.73000", pathExtension: "json")
    /// Resource file `poet.song.rank.74000.json`.
    static let poetSongRank74000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.74000", pathExtension: "json")
    /// Resource file `poet.song.rank.75000.json`.
    static let poetSongRank75000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.75000", pathExtension: "json")
    /// Resource file `poet.song.rank.76000.json`.
    static let poetSongRank76000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.76000", pathExtension: "json")
    /// Resource file `poet.song.rank.77000.json`.
    static let poetSongRank77000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.77000", pathExtension: "json")
    /// Resource file `poet.song.rank.78000.json`.
    static let poetSongRank78000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.78000", pathExtension: "json")
    /// Resource file `poet.song.rank.79000.json`.
    static let poetSongRank79000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.79000", pathExtension: "json")
    /// Resource file `poet.song.rank.8000.json`.
    static let poetSongRank8000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.8000", pathExtension: "json")
    /// Resource file `poet.song.rank.80000.json`.
    static let poetSongRank80000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.80000", pathExtension: "json")
    /// Resource file `poet.song.rank.81000.json`.
    static let poetSongRank81000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.81000", pathExtension: "json")
    /// Resource file `poet.song.rank.82000.json`.
    static let poetSongRank82000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.82000", pathExtension: "json")
    /// Resource file `poet.song.rank.83000.json`.
    static let poetSongRank83000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.83000", pathExtension: "json")
    /// Resource file `poet.song.rank.84000.json`.
    static let poetSongRank84000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.84000", pathExtension: "json")
    /// Resource file `poet.song.rank.85000.json`.
    static let poetSongRank85000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.85000", pathExtension: "json")
    /// Resource file `poet.song.rank.86000.json`.
    static let poetSongRank86000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.86000", pathExtension: "json")
    /// Resource file `poet.song.rank.87000.json`.
    static let poetSongRank87000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.87000", pathExtension: "json")
    /// Resource file `poet.song.rank.88000.json`.
    static let poetSongRank88000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.88000", pathExtension: "json")
    /// Resource file `poet.song.rank.89000.json`.
    static let poetSongRank89000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.89000", pathExtension: "json")
    /// Resource file `poet.song.rank.9000.json`.
    static let poetSongRank9000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.9000", pathExtension: "json")
    /// Resource file `poet.song.rank.90000.json`.
    static let poetSongRank90000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.90000", pathExtension: "json")
    /// Resource file `poet.song.rank.91000.json`.
    static let poetSongRank91000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.91000", pathExtension: "json")
    /// Resource file `poet.song.rank.92000.json`.
    static let poetSongRank92000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.92000", pathExtension: "json")
    /// Resource file `poet.song.rank.93000.json`.
    static let poetSongRank93000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.93000", pathExtension: "json")
    /// Resource file `poet.song.rank.94000.json`.
    static let poetSongRank94000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.94000", pathExtension: "json")
    /// Resource file `poet.song.rank.95000.json`.
    static let poetSongRank95000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.95000", pathExtension: "json")
    /// Resource file `poet.song.rank.96000.json`.
    static let poetSongRank96000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.96000", pathExtension: "json")
    /// Resource file `poet.song.rank.97000.json`.
    static let poetSongRank97000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.97000", pathExtension: "json")
    /// Resource file `poet.song.rank.98000.json`.
    static let poetSongRank98000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.98000", pathExtension: "json")
    /// Resource file `poet.song.rank.99000.json`.
    static let poetSongRank99000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.song.rank.99000", pathExtension: "json")
    /// Resource file `poet.tang.0.json`.
    static let poetTang0Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.0", pathExtension: "json")
    /// Resource file `poet.tang.1000.json`.
    static let poetTang1000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.1000", pathExtension: "json")
    /// Resource file `poet.tang.10000.json`.
    static let poetTang10000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.10000", pathExtension: "json")
    /// Resource file `poet.tang.11000.json`.
    static let poetTang11000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.11000", pathExtension: "json")
    /// Resource file `poet.tang.12000.json`.
    static let poetTang12000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.12000", pathExtension: "json")
    /// Resource file `poet.tang.13000.json`.
    static let poetTang13000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.13000", pathExtension: "json")
    /// Resource file `poet.tang.14000.json`.
    static let poetTang14000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.14000", pathExtension: "json")
    /// Resource file `poet.tang.15000.json`.
    static let poetTang15000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.15000", pathExtension: "json")
    /// Resource file `poet.tang.16000.json`.
    static let poetTang16000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.16000", pathExtension: "json")
    /// Resource file `poet.tang.17000.json`.
    static let poetTang17000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.17000", pathExtension: "json")
    /// Resource file `poet.tang.18000.json`.
    static let poetTang18000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.18000", pathExtension: "json")
    /// Resource file `poet.tang.19000.json`.
    static let poetTang19000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.19000", pathExtension: "json")
    /// Resource file `poet.tang.2000.json`.
    static let poetTang2000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.2000", pathExtension: "json")
    /// Resource file `poet.tang.20000.json`.
    static let poetTang20000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.20000", pathExtension: "json")
    /// Resource file `poet.tang.21000.json`.
    static let poetTang21000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.21000", pathExtension: "json")
    /// Resource file `poet.tang.22000.json`.
    static let poetTang22000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.22000", pathExtension: "json")
    /// Resource file `poet.tang.23000.json`.
    static let poetTang23000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.23000", pathExtension: "json")
    /// Resource file `poet.tang.24000.json`.
    static let poetTang24000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.24000", pathExtension: "json")
    /// Resource file `poet.tang.25000.json`.
    static let poetTang25000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.25000", pathExtension: "json")
    /// Resource file `poet.tang.26000.json`.
    static let poetTang26000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.26000", pathExtension: "json")
    /// Resource file `poet.tang.27000.json`.
    static let poetTang27000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.27000", pathExtension: "json")
    /// Resource file `poet.tang.28000.json`.
    static let poetTang28000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.28000", pathExtension: "json")
    /// Resource file `poet.tang.29000.json`.
    static let poetTang29000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.29000", pathExtension: "json")
    /// Resource file `poet.tang.3000.json`.
    static let poetTang3000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.3000", pathExtension: "json")
    /// Resource file `poet.tang.30000.json`.
    static let poetTang30000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.30000", pathExtension: "json")
    /// Resource file `poet.tang.31000.json`.
    static let poetTang31000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.31000", pathExtension: "json")
    /// Resource file `poet.tang.32000.json`.
    static let poetTang32000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.32000", pathExtension: "json")
    /// Resource file `poet.tang.33000.json`.
    static let poetTang33000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.33000", pathExtension: "json")
    /// Resource file `poet.tang.34000.json`.
    static let poetTang34000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.34000", pathExtension: "json")
    /// Resource file `poet.tang.35000.json`.
    static let poetTang35000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.35000", pathExtension: "json")
    /// Resource file `poet.tang.36000.json`.
    static let poetTang36000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.36000", pathExtension: "json")
    /// Resource file `poet.tang.37000.json`.
    static let poetTang37000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.37000", pathExtension: "json")
    /// Resource file `poet.tang.38000.json`.
    static let poetTang38000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.38000", pathExtension: "json")
    /// Resource file `poet.tang.39000.json`.
    static let poetTang39000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.39000", pathExtension: "json")
    /// Resource file `poet.tang.4000.json`.
    static let poetTang4000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.4000", pathExtension: "json")
    /// Resource file `poet.tang.40000.json`.
    static let poetTang40000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.40000", pathExtension: "json")
    /// Resource file `poet.tang.41000.json`.
    static let poetTang41000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.41000", pathExtension: "json")
    /// Resource file `poet.tang.42000.json`.
    static let poetTang42000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.42000", pathExtension: "json")
    /// Resource file `poet.tang.43000.json`.
    static let poetTang43000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.43000", pathExtension: "json")
    /// Resource file `poet.tang.44000.json`.
    static let poetTang44000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.44000", pathExtension: "json")
    /// Resource file `poet.tang.45000.json`.
    static let poetTang45000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.45000", pathExtension: "json")
    /// Resource file `poet.tang.46000.json`.
    static let poetTang46000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.46000", pathExtension: "json")
    /// Resource file `poet.tang.47000.json`.
    static let poetTang47000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.47000", pathExtension: "json")
    /// Resource file `poet.tang.48000.json`.
    static let poetTang48000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.48000", pathExtension: "json")
    /// Resource file `poet.tang.49000.json`.
    static let poetTang49000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.49000", pathExtension: "json")
    /// Resource file `poet.tang.5000.json`.
    static let poetTang5000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.5000", pathExtension: "json")
    /// Resource file `poet.tang.50000.json`.
    static let poetTang50000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.50000", pathExtension: "json")
    /// Resource file `poet.tang.51000.json`.
    static let poetTang51000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.51000", pathExtension: "json")
    /// Resource file `poet.tang.52000.json`.
    static let poetTang52000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.52000", pathExtension: "json")
    /// Resource file `poet.tang.53000.json`.
    static let poetTang53000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.53000", pathExtension: "json")
    /// Resource file `poet.tang.54000.json`.
    static let poetTang54000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.54000", pathExtension: "json")
    /// Resource file `poet.tang.55000.json`.
    static let poetTang55000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.55000", pathExtension: "json")
    /// Resource file `poet.tang.56000.json`.
    static let poetTang56000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.56000", pathExtension: "json")
    /// Resource file `poet.tang.57000.json`.
    static let poetTang57000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.57000", pathExtension: "json")
    /// Resource file `poet.tang.6000.json`.
    static let poetTang6000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.6000", pathExtension: "json")
    /// Resource file `poet.tang.7000.json`.
    static let poetTang7000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.7000", pathExtension: "json")
    /// Resource file `poet.tang.8000.json`.
    static let poetTang8000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.8000", pathExtension: "json")
    /// Resource file `poet.tang.9000.json`.
    static let poetTang9000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.9000", pathExtension: "json")
    /// Resource file `poet.tang.rank.0.json`.
    static let poetTangRank0Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.0", pathExtension: "json")
    /// Resource file `poet.tang.rank.1000.json`.
    static let poetTangRank1000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.1000", pathExtension: "json")
    /// Resource file `poet.tang.rank.10000.json`.
    static let poetTangRank10000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.10000", pathExtension: "json")
    /// Resource file `poet.tang.rank.11000.json`.
    static let poetTangRank11000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.11000", pathExtension: "json")
    /// Resource file `poet.tang.rank.12000.json`.
    static let poetTangRank12000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.12000", pathExtension: "json")
    /// Resource file `poet.tang.rank.13000.json`.
    static let poetTangRank13000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.13000", pathExtension: "json")
    /// Resource file `poet.tang.rank.14000.json`.
    static let poetTangRank14000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.14000", pathExtension: "json")
    /// Resource file `poet.tang.rank.15000.json`.
    static let poetTangRank15000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.15000", pathExtension: "json")
    /// Resource file `poet.tang.rank.16000.json`.
    static let poetTangRank16000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.16000", pathExtension: "json")
    /// Resource file `poet.tang.rank.17000.json`.
    static let poetTangRank17000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.17000", pathExtension: "json")
    /// Resource file `poet.tang.rank.18000.json`.
    static let poetTangRank18000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.18000", pathExtension: "json")
    /// Resource file `poet.tang.rank.19000.json`.
    static let poetTangRank19000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.19000", pathExtension: "json")
    /// Resource file `poet.tang.rank.2000.json`.
    static let poetTangRank2000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.2000", pathExtension: "json")
    /// Resource file `poet.tang.rank.20000.json`.
    static let poetTangRank20000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.20000", pathExtension: "json")
    /// Resource file `poet.tang.rank.21000.json`.
    static let poetTangRank21000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.21000", pathExtension: "json")
    /// Resource file `poet.tang.rank.22000.json`.
    static let poetTangRank22000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.22000", pathExtension: "json")
    /// Resource file `poet.tang.rank.23000.json`.
    static let poetTangRank23000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.23000", pathExtension: "json")
    /// Resource file `poet.tang.rank.24000.json`.
    static let poetTangRank24000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.24000", pathExtension: "json")
    /// Resource file `poet.tang.rank.25000.json`.
    static let poetTangRank25000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.25000", pathExtension: "json")
    /// Resource file `poet.tang.rank.26000.json`.
    static let poetTangRank26000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.26000", pathExtension: "json")
    /// Resource file `poet.tang.rank.27000.json`.
    static let poetTangRank27000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.27000", pathExtension: "json")
    /// Resource file `poet.tang.rank.28000.json`.
    static let poetTangRank28000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.28000", pathExtension: "json")
    /// Resource file `poet.tang.rank.29000.json`.
    static let poetTangRank29000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.29000", pathExtension: "json")
    /// Resource file `poet.tang.rank.3000.json`.
    static let poetTangRank3000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.3000", pathExtension: "json")
    /// Resource file `poet.tang.rank.30000.json`.
    static let poetTangRank30000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.30000", pathExtension: "json")
    /// Resource file `poet.tang.rank.31000.json`.
    static let poetTangRank31000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.31000", pathExtension: "json")
    /// Resource file `poet.tang.rank.32000.json`.
    static let poetTangRank32000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.32000", pathExtension: "json")
    /// Resource file `poet.tang.rank.33000.json`.
    static let poetTangRank33000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.33000", pathExtension: "json")
    /// Resource file `poet.tang.rank.34000.json`.
    static let poetTangRank34000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.34000", pathExtension: "json")
    /// Resource file `poet.tang.rank.35000.json`.
    static let poetTangRank35000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.35000", pathExtension: "json")
    /// Resource file `poet.tang.rank.36000.json`.
    static let poetTangRank36000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.36000", pathExtension: "json")
    /// Resource file `poet.tang.rank.37000.json`.
    static let poetTangRank37000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.37000", pathExtension: "json")
    /// Resource file `poet.tang.rank.38000.json`.
    static let poetTangRank38000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.38000", pathExtension: "json")
    /// Resource file `poet.tang.rank.39000.json`.
    static let poetTangRank39000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.39000", pathExtension: "json")
    /// Resource file `poet.tang.rank.4000.json`.
    static let poetTangRank4000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.4000", pathExtension: "json")
    /// Resource file `poet.tang.rank.40000.json`.
    static let poetTangRank40000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.40000", pathExtension: "json")
    /// Resource file `poet.tang.rank.41000.json`.
    static let poetTangRank41000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.41000", pathExtension: "json")
    /// Resource file `poet.tang.rank.42000.json`.
    static let poetTangRank42000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.42000", pathExtension: "json")
    /// Resource file `poet.tang.rank.43000.json`.
    static let poetTangRank43000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.43000", pathExtension: "json")
    /// Resource file `poet.tang.rank.44000.json`.
    static let poetTangRank44000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.44000", pathExtension: "json")
    /// Resource file `poet.tang.rank.45000.json`.
    static let poetTangRank45000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.45000", pathExtension: "json")
    /// Resource file `poet.tang.rank.46000.json`.
    static let poetTangRank46000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.46000", pathExtension: "json")
    /// Resource file `poet.tang.rank.47000.json`.
    static let poetTangRank47000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.47000", pathExtension: "json")
    /// Resource file `poet.tang.rank.48000.json`.
    static let poetTangRank48000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.48000", pathExtension: "json")
    /// Resource file `poet.tang.rank.49000.json`.
    static let poetTangRank49000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.49000", pathExtension: "json")
    /// Resource file `poet.tang.rank.5000.json`.
    static let poetTangRank5000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.5000", pathExtension: "json")
    /// Resource file `poet.tang.rank.50000.json`.
    static let poetTangRank50000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.50000", pathExtension: "json")
    /// Resource file `poet.tang.rank.51000.json`.
    static let poetTangRank51000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.51000", pathExtension: "json")
    /// Resource file `poet.tang.rank.52000.json`.
    static let poetTangRank52000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.52000", pathExtension: "json")
    /// Resource file `poet.tang.rank.53000.json`.
    static let poetTangRank53000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.53000", pathExtension: "json")
    /// Resource file `poet.tang.rank.54000.json`.
    static let poetTangRank54000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.54000", pathExtension: "json")
    /// Resource file `poet.tang.rank.55000.json`.
    static let poetTangRank55000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.55000", pathExtension: "json")
    /// Resource file `poet.tang.rank.56000.json`.
    static let poetTangRank56000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.56000", pathExtension: "json")
    /// Resource file `poet.tang.rank.57000.json`.
    static let poetTangRank57000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.57000", pathExtension: "json")
    /// Resource file `poet.tang.rank.6000.json`.
    static let poetTangRank6000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.6000", pathExtension: "json")
    /// Resource file `poet.tang.rank.7000.json`.
    static let poetTangRank7000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.7000", pathExtension: "json")
    /// Resource file `poet.tang.rank.8000.json`.
    static let poetTangRank8000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.8000", pathExtension: "json")
    /// Resource file `poet.tang.rank.9000.json`.
    static let poetTangRank9000Json = Rswift.FileResource(bundle: R.hostingBundle, name: "poet.tang.rank.9000", pathExtension: "json")
    /// Resource file `poetTest.json`.
    static let poetTestJson = Rswift.FileResource(bundle: R.hostingBundle, name: "poetTest", pathExtension: "json")
    /// Resource file `qianjiashi.json`.
    static let qianjiashiJson = Rswift.FileResource(bundle: R.hostingBundle, name: "qianjiashi", pathExtension: "json")
    /// Resource file `qianziwen.json`.
    static let qianziwenJson = Rswift.FileResource(bundle: R.hostingBundle, name: "qianziwen", pathExtension: "json")
    /// Resource file `sanzijing-new.json`.
    static let sanzijingNewJson = Rswift.FileResource(bundle: R.hostingBundle, name: "sanzijing-new", pathExtension: "json")
    /// Resource file `sanzijing-traditional.json`.
    static let sanzijingTraditionalJson = Rswift.FileResource(bundle: R.hostingBundle, name: "sanzijing-traditional", pathExtension: "json")
    /// Resource file `server.js`.
    static let serverJs = Rswift.FileResource(bundle: R.hostingBundle, name: "server", pathExtension: "js")
    /// Resource file `shenglvqimeng.json`.
    static let shenglvqimengJson = Rswift.FileResource(bundle: R.hostingBundle, name: "shenglvqimeng", pathExtension: "json")
    /// Resource file `shijing.json`.
    static let shijingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "shijing", pathExtension: "json")
    /// Resource file `tangshisanbaishou.json`.
    static let tangshisanbaishouJson = Rswift.FileResource(bundle: R.hostingBundle, name: "tangshisanbaishou", pathExtension: "json")
    /// Resource file `wenzimengqiu.json`.
    static let wenzimengqiuJson = Rswift.FileResource(bundle: R.hostingBundle, name: "wenzimengqiu", pathExtension: "json")
    /// Resource file `youxueqionglin.json`.
    static let youxueqionglinJson = Rswift.FileResource(bundle: R.hostingBundle, name: "youxueqionglin", pathExtension: "json")
    /// Resource file `yuanqu.json`.
    static let yuanquJson = Rswift.FileResource(bundle: R.hostingBundle, name: "yuanqu", pathExtension: "json")
    /// Resource file `zengguangxianwen.json`.
    static let zengguangxianwenJson = Rswift.FileResource(bundle: R.hostingBundle, name: "zengguangxianwen", pathExtension: "json")
    /// Resource file `zhongyong.json`.
    static let zhongyongJson = Rswift.FileResource(bundle: R.hostingBundle, name: "zhongyong", pathExtension: "json")
    /// Resource file `zhuzijiaxun.json`.
    static let zhuzijiaxunJson = Rswift.FileResource(bundle: R.hostingBundle, name: "zhuzijiaxun", pathExtension: "json")

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "baijiaxing", withExtension: "json")`
    static func baijiaxingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.baijiaxingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.0", withExtension: "json")`
    static func ciSongRank0Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank0Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.1000", withExtension: "json")`
    static func ciSongRank1000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank1000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.10000", withExtension: "json")`
    static func ciSongRank10000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank10000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.11000", withExtension: "json")`
    static func ciSongRank11000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank11000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.12000", withExtension: "json")`
    static func ciSongRank12000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank12000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.13000", withExtension: "json")`
    static func ciSongRank13000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank13000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.14000", withExtension: "json")`
    static func ciSongRank14000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank14000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.15000", withExtension: "json")`
    static func ciSongRank15000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank15000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.16000", withExtension: "json")`
    static func ciSongRank16000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank16000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.17000", withExtension: "json")`
    static func ciSongRank17000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank17000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.18000", withExtension: "json")`
    static func ciSongRank18000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank18000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.19000", withExtension: "json")`
    static func ciSongRank19000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank19000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.2000", withExtension: "json")`
    static func ciSongRank2000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank2000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.20000", withExtension: "json")`
    static func ciSongRank20000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank20000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.2019y", withExtension: "json")`
    static func ciSongRank2019yJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank2019yJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.21000", withExtension: "json")`
    static func ciSongRank21000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank21000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.3000", withExtension: "json")`
    static func ciSongRank3000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank3000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.4000", withExtension: "json")`
    static func ciSongRank4000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank4000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.5000", withExtension: "json")`
    static func ciSongRank5000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank5000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.6000", withExtension: "json")`
    static func ciSongRank6000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank6000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.7000", withExtension: "json")`
    static func ciSongRank7000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank7000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.8000", withExtension: "json")`
    static func ciSongRank8000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank8000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ci.song.rank.9000", withExtension: "json")`
    static func ciSongRank9000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ciSongRank9000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "daxue", withExtension: "json")`
    static func daxueJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.daxueJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dizigui", withExtension: "json")`
    static func diziguiJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.diziguiJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "guwenguanzhi", withExtension: "json")`
    static func guwenguanzhiJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.guwenguanzhiJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "lunyu", withExtension: "json")`
    static func lunyuJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lunyuJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "mengzi", withExtension: "json")`
    static func mengziJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mengziJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.0", withExtension: "json")`
    static func poetSong0Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong0Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.1000", withExtension: "json")`
    static func poetSong1000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong1000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.10000", withExtension: "json")`
    static func poetSong10000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong10000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.100000", withExtension: "json")`
    static func poetSong100000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong100000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.101000", withExtension: "json")`
    static func poetSong101000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong101000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.102000", withExtension: "json")`
    static func poetSong102000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong102000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.103000", withExtension: "json")`
    static func poetSong103000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong103000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.104000", withExtension: "json")`
    static func poetSong104000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong104000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.105000", withExtension: "json")`
    static func poetSong105000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong105000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.106000", withExtension: "json")`
    static func poetSong106000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong106000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.107000", withExtension: "json")`
    static func poetSong107000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong107000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.108000", withExtension: "json")`
    static func poetSong108000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong108000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.109000", withExtension: "json")`
    static func poetSong109000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong109000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.11000", withExtension: "json")`
    static func poetSong11000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong11000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.110000", withExtension: "json")`
    static func poetSong110000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong110000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.111000", withExtension: "json")`
    static func poetSong111000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong111000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.112000", withExtension: "json")`
    static func poetSong112000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong112000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.113000", withExtension: "json")`
    static func poetSong113000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong113000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.114000", withExtension: "json")`
    static func poetSong114000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong114000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.115000", withExtension: "json")`
    static func poetSong115000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong115000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.116000", withExtension: "json")`
    static func poetSong116000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong116000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.117000", withExtension: "json")`
    static func poetSong117000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong117000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.118000", withExtension: "json")`
    static func poetSong118000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong118000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.119000", withExtension: "json")`
    static func poetSong119000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong119000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.12000", withExtension: "json")`
    static func poetSong12000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong12000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.120000", withExtension: "json")`
    static func poetSong120000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong120000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.121000", withExtension: "json")`
    static func poetSong121000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong121000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.122000", withExtension: "json")`
    static func poetSong122000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong122000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.123000", withExtension: "json")`
    static func poetSong123000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong123000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.124000", withExtension: "json")`
    static func poetSong124000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong124000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.125000", withExtension: "json")`
    static func poetSong125000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong125000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.126000", withExtension: "json")`
    static func poetSong126000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong126000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.127000", withExtension: "json")`
    static func poetSong127000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong127000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.128000", withExtension: "json")`
    static func poetSong128000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong128000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.129000", withExtension: "json")`
    static func poetSong129000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong129000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.13000", withExtension: "json")`
    static func poetSong13000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong13000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.130000", withExtension: "json")`
    static func poetSong130000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong130000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.131000", withExtension: "json")`
    static func poetSong131000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong131000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.132000", withExtension: "json")`
    static func poetSong132000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong132000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.133000", withExtension: "json")`
    static func poetSong133000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong133000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.134000", withExtension: "json")`
    static func poetSong134000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong134000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.135000", withExtension: "json")`
    static func poetSong135000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong135000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.136000", withExtension: "json")`
    static func poetSong136000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong136000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.137000", withExtension: "json")`
    static func poetSong137000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong137000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.138000", withExtension: "json")`
    static func poetSong138000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong138000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.139000", withExtension: "json")`
    static func poetSong139000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong139000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.14000", withExtension: "json")`
    static func poetSong14000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong14000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.140000", withExtension: "json")`
    static func poetSong140000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong140000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.141000", withExtension: "json")`
    static func poetSong141000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong141000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.142000", withExtension: "json")`
    static func poetSong142000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong142000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.143000", withExtension: "json")`
    static func poetSong143000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong143000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.144000", withExtension: "json")`
    static func poetSong144000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong144000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.145000", withExtension: "json")`
    static func poetSong145000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong145000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.146000", withExtension: "json")`
    static func poetSong146000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong146000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.147000", withExtension: "json")`
    static func poetSong147000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong147000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.148000", withExtension: "json")`
    static func poetSong148000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong148000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.149000", withExtension: "json")`
    static func poetSong149000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong149000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.15000", withExtension: "json")`
    static func poetSong15000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong15000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.150000", withExtension: "json")`
    static func poetSong150000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong150000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.151000", withExtension: "json")`
    static func poetSong151000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong151000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.152000", withExtension: "json")`
    static func poetSong152000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong152000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.153000", withExtension: "json")`
    static func poetSong153000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong153000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.154000", withExtension: "json")`
    static func poetSong154000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong154000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.155000", withExtension: "json")`
    static func poetSong155000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong155000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.156000", withExtension: "json")`
    static func poetSong156000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong156000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.157000", withExtension: "json")`
    static func poetSong157000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong157000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.158000", withExtension: "json")`
    static func poetSong158000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong158000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.159000", withExtension: "json")`
    static func poetSong159000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong159000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.16000", withExtension: "json")`
    static func poetSong16000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong16000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.160000", withExtension: "json")`
    static func poetSong160000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong160000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.161000", withExtension: "json")`
    static func poetSong161000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong161000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.162000", withExtension: "json")`
    static func poetSong162000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong162000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.163000", withExtension: "json")`
    static func poetSong163000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong163000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.164000", withExtension: "json")`
    static func poetSong164000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong164000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.165000", withExtension: "json")`
    static func poetSong165000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong165000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.166000", withExtension: "json")`
    static func poetSong166000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong166000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.167000", withExtension: "json")`
    static func poetSong167000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong167000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.168000", withExtension: "json")`
    static func poetSong168000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong168000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.169000", withExtension: "json")`
    static func poetSong169000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong169000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.17000", withExtension: "json")`
    static func poetSong17000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong17000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.170000", withExtension: "json")`
    static func poetSong170000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong170000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.171000", withExtension: "json")`
    static func poetSong171000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong171000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.172000", withExtension: "json")`
    static func poetSong172000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong172000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.173000", withExtension: "json")`
    static func poetSong173000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong173000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.174000", withExtension: "json")`
    static func poetSong174000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong174000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.175000", withExtension: "json")`
    static func poetSong175000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong175000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.176000", withExtension: "json")`
    static func poetSong176000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong176000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.177000", withExtension: "json")`
    static func poetSong177000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong177000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.178000", withExtension: "json")`
    static func poetSong178000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong178000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.179000", withExtension: "json")`
    static func poetSong179000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong179000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.18000", withExtension: "json")`
    static func poetSong18000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong18000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.180000", withExtension: "json")`
    static func poetSong180000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong180000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.181000", withExtension: "json")`
    static func poetSong181000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong181000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.182000", withExtension: "json")`
    static func poetSong182000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong182000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.183000", withExtension: "json")`
    static func poetSong183000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong183000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.184000", withExtension: "json")`
    static func poetSong184000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong184000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.185000", withExtension: "json")`
    static func poetSong185000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong185000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.186000", withExtension: "json")`
    static func poetSong186000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong186000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.187000", withExtension: "json")`
    static func poetSong187000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong187000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.188000", withExtension: "json")`
    static func poetSong188000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong188000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.189000", withExtension: "json")`
    static func poetSong189000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong189000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.19000", withExtension: "json")`
    static func poetSong19000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong19000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.190000", withExtension: "json")`
    static func poetSong190000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong190000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.191000", withExtension: "json")`
    static func poetSong191000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong191000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.192000", withExtension: "json")`
    static func poetSong192000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong192000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.193000", withExtension: "json")`
    static func poetSong193000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong193000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.194000", withExtension: "json")`
    static func poetSong194000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong194000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.195000", withExtension: "json")`
    static func poetSong195000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong195000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.196000", withExtension: "json")`
    static func poetSong196000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong196000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.197000", withExtension: "json")`
    static func poetSong197000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong197000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.198000", withExtension: "json")`
    static func poetSong198000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong198000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.199000", withExtension: "json")`
    static func poetSong199000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong199000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.2000", withExtension: "json")`
    static func poetSong2000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong2000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.20000", withExtension: "json")`
    static func poetSong20000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong20000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.200000", withExtension: "json")`
    static func poetSong200000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong200000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.201000", withExtension: "json")`
    static func poetSong201000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong201000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.202000", withExtension: "json")`
    static func poetSong202000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong202000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.203000", withExtension: "json")`
    static func poetSong203000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong203000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.204000", withExtension: "json")`
    static func poetSong204000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong204000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.205000", withExtension: "json")`
    static func poetSong205000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong205000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.206000", withExtension: "json")`
    static func poetSong206000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong206000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.207000", withExtension: "json")`
    static func poetSong207000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong207000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.208000", withExtension: "json")`
    static func poetSong208000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong208000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.209000", withExtension: "json")`
    static func poetSong209000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong209000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.21000", withExtension: "json")`
    static func poetSong21000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong21000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.210000", withExtension: "json")`
    static func poetSong210000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong210000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.211000", withExtension: "json")`
    static func poetSong211000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong211000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.212000", withExtension: "json")`
    static func poetSong212000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong212000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.213000", withExtension: "json")`
    static func poetSong213000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong213000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.214000", withExtension: "json")`
    static func poetSong214000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong214000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.215000", withExtension: "json")`
    static func poetSong215000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong215000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.216000", withExtension: "json")`
    static func poetSong216000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong216000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.217000", withExtension: "json")`
    static func poetSong217000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong217000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.218000", withExtension: "json")`
    static func poetSong218000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong218000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.219000", withExtension: "json")`
    static func poetSong219000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong219000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.22000", withExtension: "json")`
    static func poetSong22000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong22000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.220000", withExtension: "json")`
    static func poetSong220000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong220000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.221000", withExtension: "json")`
    static func poetSong221000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong221000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.222000", withExtension: "json")`
    static func poetSong222000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong222000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.223000", withExtension: "json")`
    static func poetSong223000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong223000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.224000", withExtension: "json")`
    static func poetSong224000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong224000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.225000", withExtension: "json")`
    static func poetSong225000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong225000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.226000", withExtension: "json")`
    static func poetSong226000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong226000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.227000", withExtension: "json")`
    static func poetSong227000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong227000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.228000", withExtension: "json")`
    static func poetSong228000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong228000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.229000", withExtension: "json")`
    static func poetSong229000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong229000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.23000", withExtension: "json")`
    static func poetSong23000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong23000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.230000", withExtension: "json")`
    static func poetSong230000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong230000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.231000", withExtension: "json")`
    static func poetSong231000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong231000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.232000", withExtension: "json")`
    static func poetSong232000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong232000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.233000", withExtension: "json")`
    static func poetSong233000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong233000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.234000", withExtension: "json")`
    static func poetSong234000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong234000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.235000", withExtension: "json")`
    static func poetSong235000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong235000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.236000", withExtension: "json")`
    static func poetSong236000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong236000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.237000", withExtension: "json")`
    static func poetSong237000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong237000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.238000", withExtension: "json")`
    static func poetSong238000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong238000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.239000", withExtension: "json")`
    static func poetSong239000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong239000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.24000", withExtension: "json")`
    static func poetSong24000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong24000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.240000", withExtension: "json")`
    static func poetSong240000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong240000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.241000", withExtension: "json")`
    static func poetSong241000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong241000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.242000", withExtension: "json")`
    static func poetSong242000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong242000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.243000", withExtension: "json")`
    static func poetSong243000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong243000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.244000", withExtension: "json")`
    static func poetSong244000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong244000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.245000", withExtension: "json")`
    static func poetSong245000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong245000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.246000", withExtension: "json")`
    static func poetSong246000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong246000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.247000", withExtension: "json")`
    static func poetSong247000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong247000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.248000", withExtension: "json")`
    static func poetSong248000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong248000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.249000", withExtension: "json")`
    static func poetSong249000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong249000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.25000", withExtension: "json")`
    static func poetSong25000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong25000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.250000", withExtension: "json")`
    static func poetSong250000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong250000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.251000", withExtension: "json")`
    static func poetSong251000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong251000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.252000", withExtension: "json")`
    static func poetSong252000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong252000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.253000", withExtension: "json")`
    static func poetSong253000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong253000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.254000", withExtension: "json")`
    static func poetSong254000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong254000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.26000", withExtension: "json")`
    static func poetSong26000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong26000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.27000", withExtension: "json")`
    static func poetSong27000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong27000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.28000", withExtension: "json")`
    static func poetSong28000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong28000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.29000", withExtension: "json")`
    static func poetSong29000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong29000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.3000", withExtension: "json")`
    static func poetSong3000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong3000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.30000", withExtension: "json")`
    static func poetSong30000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong30000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.31000", withExtension: "json")`
    static func poetSong31000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong31000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.32000", withExtension: "json")`
    static func poetSong32000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong32000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.33000", withExtension: "json")`
    static func poetSong33000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong33000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.34000", withExtension: "json")`
    static func poetSong34000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong34000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.35000", withExtension: "json")`
    static func poetSong35000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong35000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.36000", withExtension: "json")`
    static func poetSong36000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong36000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.37000", withExtension: "json")`
    static func poetSong37000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong37000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.38000", withExtension: "json")`
    static func poetSong38000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong38000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.39000", withExtension: "json")`
    static func poetSong39000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong39000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.4000", withExtension: "json")`
    static func poetSong4000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong4000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.40000", withExtension: "json")`
    static func poetSong40000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong40000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.41000", withExtension: "json")`
    static func poetSong41000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong41000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.42000", withExtension: "json")`
    static func poetSong42000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong42000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.43000", withExtension: "json")`
    static func poetSong43000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong43000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.44000", withExtension: "json")`
    static func poetSong44000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong44000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.45000", withExtension: "json")`
    static func poetSong45000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong45000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.46000", withExtension: "json")`
    static func poetSong46000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong46000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.47000", withExtension: "json")`
    static func poetSong47000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong47000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.48000", withExtension: "json")`
    static func poetSong48000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong48000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.49000", withExtension: "json")`
    static func poetSong49000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong49000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.5000", withExtension: "json")`
    static func poetSong5000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong5000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.50000", withExtension: "json")`
    static func poetSong50000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong50000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.51000", withExtension: "json")`
    static func poetSong51000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong51000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.52000", withExtension: "json")`
    static func poetSong52000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong52000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.53000", withExtension: "json")`
    static func poetSong53000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong53000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.54000", withExtension: "json")`
    static func poetSong54000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong54000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.55000", withExtension: "json")`
    static func poetSong55000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong55000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.56000", withExtension: "json")`
    static func poetSong56000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong56000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.57000", withExtension: "json")`
    static func poetSong57000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong57000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.58000", withExtension: "json")`
    static func poetSong58000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong58000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.59000", withExtension: "json")`
    static func poetSong59000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong59000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.6000", withExtension: "json")`
    static func poetSong6000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong6000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.60000", withExtension: "json")`
    static func poetSong60000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong60000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.61000", withExtension: "json")`
    static func poetSong61000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong61000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.62000", withExtension: "json")`
    static func poetSong62000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong62000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.63000", withExtension: "json")`
    static func poetSong63000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong63000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.64000", withExtension: "json")`
    static func poetSong64000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong64000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.65000", withExtension: "json")`
    static func poetSong65000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong65000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.66000", withExtension: "json")`
    static func poetSong66000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong66000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.67000", withExtension: "json")`
    static func poetSong67000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong67000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.68000", withExtension: "json")`
    static func poetSong68000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong68000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.69000", withExtension: "json")`
    static func poetSong69000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong69000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.7000", withExtension: "json")`
    static func poetSong7000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong7000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.70000", withExtension: "json")`
    static func poetSong70000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong70000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.71000", withExtension: "json")`
    static func poetSong71000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong71000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.72000", withExtension: "json")`
    static func poetSong72000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong72000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.73000", withExtension: "json")`
    static func poetSong73000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong73000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.74000", withExtension: "json")`
    static func poetSong74000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong74000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.75000", withExtension: "json")`
    static func poetSong75000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong75000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.76000", withExtension: "json")`
    static func poetSong76000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong76000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.77000", withExtension: "json")`
    static func poetSong77000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong77000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.78000", withExtension: "json")`
    static func poetSong78000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong78000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.79000", withExtension: "json")`
    static func poetSong79000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong79000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.8000", withExtension: "json")`
    static func poetSong8000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong8000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.80000", withExtension: "json")`
    static func poetSong80000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong80000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.81000", withExtension: "json")`
    static func poetSong81000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong81000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.82000", withExtension: "json")`
    static func poetSong82000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong82000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.83000", withExtension: "json")`
    static func poetSong83000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong83000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.84000", withExtension: "json")`
    static func poetSong84000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong84000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.85000", withExtension: "json")`
    static func poetSong85000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong85000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.86000", withExtension: "json")`
    static func poetSong86000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong86000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.87000", withExtension: "json")`
    static func poetSong87000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong87000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.88000", withExtension: "json")`
    static func poetSong88000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong88000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.89000", withExtension: "json")`
    static func poetSong89000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong89000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.9000", withExtension: "json")`
    static func poetSong9000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong9000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.90000", withExtension: "json")`
    static func poetSong90000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong90000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.91000", withExtension: "json")`
    static func poetSong91000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong91000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.92000", withExtension: "json")`
    static func poetSong92000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong92000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.93000", withExtension: "json")`
    static func poetSong93000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong93000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.94000", withExtension: "json")`
    static func poetSong94000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong94000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.95000", withExtension: "json")`
    static func poetSong95000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong95000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.96000", withExtension: "json")`
    static func poetSong96000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong96000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.97000", withExtension: "json")`
    static func poetSong97000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong97000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.98000", withExtension: "json")`
    static func poetSong98000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong98000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.99000", withExtension: "json")`
    static func poetSong99000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSong99000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.0", withExtension: "json")`
    static func poetSongRank0Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank0Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.1000", withExtension: "json")`
    static func poetSongRank1000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank1000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.10000", withExtension: "json")`
    static func poetSongRank10000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank10000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.100000", withExtension: "json")`
    static func poetSongRank100000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank100000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.101000", withExtension: "json")`
    static func poetSongRank101000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank101000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.102000", withExtension: "json")`
    static func poetSongRank102000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank102000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.103000", withExtension: "json")`
    static func poetSongRank103000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank103000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.104000", withExtension: "json")`
    static func poetSongRank104000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank104000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.105000", withExtension: "json")`
    static func poetSongRank105000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank105000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.106000", withExtension: "json")`
    static func poetSongRank106000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank106000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.107000", withExtension: "json")`
    static func poetSongRank107000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank107000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.108000", withExtension: "json")`
    static func poetSongRank108000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank108000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.109000", withExtension: "json")`
    static func poetSongRank109000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank109000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.11000", withExtension: "json")`
    static func poetSongRank11000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank11000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.110000", withExtension: "json")`
    static func poetSongRank110000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank110000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.111000", withExtension: "json")`
    static func poetSongRank111000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank111000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.112000", withExtension: "json")`
    static func poetSongRank112000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank112000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.113000", withExtension: "json")`
    static func poetSongRank113000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank113000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.114000", withExtension: "json")`
    static func poetSongRank114000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank114000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.115000", withExtension: "json")`
    static func poetSongRank115000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank115000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.116000", withExtension: "json")`
    static func poetSongRank116000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank116000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.117000", withExtension: "json")`
    static func poetSongRank117000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank117000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.118000", withExtension: "json")`
    static func poetSongRank118000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank118000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.119000", withExtension: "json")`
    static func poetSongRank119000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank119000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.12000", withExtension: "json")`
    static func poetSongRank12000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank12000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.120000", withExtension: "json")`
    static func poetSongRank120000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank120000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.121000", withExtension: "json")`
    static func poetSongRank121000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank121000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.122000", withExtension: "json")`
    static func poetSongRank122000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank122000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.123000", withExtension: "json")`
    static func poetSongRank123000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank123000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.124000", withExtension: "json")`
    static func poetSongRank124000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank124000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.125000", withExtension: "json")`
    static func poetSongRank125000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank125000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.126000", withExtension: "json")`
    static func poetSongRank126000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank126000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.127000", withExtension: "json")`
    static func poetSongRank127000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank127000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.128000", withExtension: "json")`
    static func poetSongRank128000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank128000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.129000", withExtension: "json")`
    static func poetSongRank129000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank129000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.13000", withExtension: "json")`
    static func poetSongRank13000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank13000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.130000", withExtension: "json")`
    static func poetSongRank130000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank130000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.131000", withExtension: "json")`
    static func poetSongRank131000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank131000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.132000", withExtension: "json")`
    static func poetSongRank132000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank132000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.133000", withExtension: "json")`
    static func poetSongRank133000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank133000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.134000", withExtension: "json")`
    static func poetSongRank134000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank134000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.135000", withExtension: "json")`
    static func poetSongRank135000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank135000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.136000", withExtension: "json")`
    static func poetSongRank136000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank136000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.137000", withExtension: "json")`
    static func poetSongRank137000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank137000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.138000", withExtension: "json")`
    static func poetSongRank138000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank138000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.139000", withExtension: "json")`
    static func poetSongRank139000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank139000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.14000", withExtension: "json")`
    static func poetSongRank14000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank14000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.140000", withExtension: "json")`
    static func poetSongRank140000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank140000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.141000", withExtension: "json")`
    static func poetSongRank141000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank141000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.142000", withExtension: "json")`
    static func poetSongRank142000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank142000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.143000", withExtension: "json")`
    static func poetSongRank143000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank143000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.144000", withExtension: "json")`
    static func poetSongRank144000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank144000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.145000", withExtension: "json")`
    static func poetSongRank145000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank145000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.146000", withExtension: "json")`
    static func poetSongRank146000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank146000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.147000", withExtension: "json")`
    static func poetSongRank147000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank147000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.148000", withExtension: "json")`
    static func poetSongRank148000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank148000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.149000", withExtension: "json")`
    static func poetSongRank149000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank149000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.15000", withExtension: "json")`
    static func poetSongRank15000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank15000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.150000", withExtension: "json")`
    static func poetSongRank150000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank150000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.151000", withExtension: "json")`
    static func poetSongRank151000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank151000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.152000", withExtension: "json")`
    static func poetSongRank152000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank152000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.153000", withExtension: "json")`
    static func poetSongRank153000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank153000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.154000", withExtension: "json")`
    static func poetSongRank154000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank154000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.155000", withExtension: "json")`
    static func poetSongRank155000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank155000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.156000", withExtension: "json")`
    static func poetSongRank156000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank156000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.157000", withExtension: "json")`
    static func poetSongRank157000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank157000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.158000", withExtension: "json")`
    static func poetSongRank158000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank158000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.159000", withExtension: "json")`
    static func poetSongRank159000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank159000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.16000", withExtension: "json")`
    static func poetSongRank16000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank16000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.160000", withExtension: "json")`
    static func poetSongRank160000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank160000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.161000", withExtension: "json")`
    static func poetSongRank161000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank161000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.162000", withExtension: "json")`
    static func poetSongRank162000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank162000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.163000", withExtension: "json")`
    static func poetSongRank163000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank163000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.164000", withExtension: "json")`
    static func poetSongRank164000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank164000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.165000", withExtension: "json")`
    static func poetSongRank165000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank165000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.166000", withExtension: "json")`
    static func poetSongRank166000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank166000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.167000", withExtension: "json")`
    static func poetSongRank167000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank167000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.168000", withExtension: "json")`
    static func poetSongRank168000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank168000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.169000", withExtension: "json")`
    static func poetSongRank169000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank169000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.17000", withExtension: "json")`
    static func poetSongRank17000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank17000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.170000", withExtension: "json")`
    static func poetSongRank170000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank170000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.171000", withExtension: "json")`
    static func poetSongRank171000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank171000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.172000", withExtension: "json")`
    static func poetSongRank172000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank172000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.173000", withExtension: "json")`
    static func poetSongRank173000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank173000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.174000", withExtension: "json")`
    static func poetSongRank174000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank174000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.175000", withExtension: "json")`
    static func poetSongRank175000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank175000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.176000", withExtension: "json")`
    static func poetSongRank176000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank176000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.177000", withExtension: "json")`
    static func poetSongRank177000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank177000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.178000", withExtension: "json")`
    static func poetSongRank178000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank178000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.179000", withExtension: "json")`
    static func poetSongRank179000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank179000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.18000", withExtension: "json")`
    static func poetSongRank18000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank18000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.180000", withExtension: "json")`
    static func poetSongRank180000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank180000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.181000", withExtension: "json")`
    static func poetSongRank181000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank181000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.182000", withExtension: "json")`
    static func poetSongRank182000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank182000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.183000", withExtension: "json")`
    static func poetSongRank183000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank183000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.184000", withExtension: "json")`
    static func poetSongRank184000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank184000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.185000", withExtension: "json")`
    static func poetSongRank185000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank185000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.186000", withExtension: "json")`
    static func poetSongRank186000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank186000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.187000", withExtension: "json")`
    static func poetSongRank187000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank187000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.188000", withExtension: "json")`
    static func poetSongRank188000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank188000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.189000", withExtension: "json")`
    static func poetSongRank189000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank189000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.19000", withExtension: "json")`
    static func poetSongRank19000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank19000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.190000", withExtension: "json")`
    static func poetSongRank190000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank190000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.191000", withExtension: "json")`
    static func poetSongRank191000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank191000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.192000", withExtension: "json")`
    static func poetSongRank192000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank192000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.193000", withExtension: "json")`
    static func poetSongRank193000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank193000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.194000", withExtension: "json")`
    static func poetSongRank194000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank194000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.195000", withExtension: "json")`
    static func poetSongRank195000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank195000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.196000", withExtension: "json")`
    static func poetSongRank196000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank196000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.197000", withExtension: "json")`
    static func poetSongRank197000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank197000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.198000", withExtension: "json")`
    static func poetSongRank198000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank198000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.199000", withExtension: "json")`
    static func poetSongRank199000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank199000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.2000", withExtension: "json")`
    static func poetSongRank2000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank2000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.20000", withExtension: "json")`
    static func poetSongRank20000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank20000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.200000", withExtension: "json")`
    static func poetSongRank200000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank200000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.201000", withExtension: "json")`
    static func poetSongRank201000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank201000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.202000", withExtension: "json")`
    static func poetSongRank202000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank202000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.203000", withExtension: "json")`
    static func poetSongRank203000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank203000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.204000", withExtension: "json")`
    static func poetSongRank204000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank204000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.205000", withExtension: "json")`
    static func poetSongRank205000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank205000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.206000", withExtension: "json")`
    static func poetSongRank206000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank206000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.207000", withExtension: "json")`
    static func poetSongRank207000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank207000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.208000", withExtension: "json")`
    static func poetSongRank208000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank208000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.209000", withExtension: "json")`
    static func poetSongRank209000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank209000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.21000", withExtension: "json")`
    static func poetSongRank21000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank21000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.210000", withExtension: "json")`
    static func poetSongRank210000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank210000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.211000", withExtension: "json")`
    static func poetSongRank211000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank211000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.212000", withExtension: "json")`
    static func poetSongRank212000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank212000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.213000", withExtension: "json")`
    static func poetSongRank213000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank213000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.214000", withExtension: "json")`
    static func poetSongRank214000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank214000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.215000", withExtension: "json")`
    static func poetSongRank215000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank215000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.216000", withExtension: "json")`
    static func poetSongRank216000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank216000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.217000", withExtension: "json")`
    static func poetSongRank217000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank217000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.218000", withExtension: "json")`
    static func poetSongRank218000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank218000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.219000", withExtension: "json")`
    static func poetSongRank219000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank219000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.22000", withExtension: "json")`
    static func poetSongRank22000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank22000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.220000", withExtension: "json")`
    static func poetSongRank220000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank220000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.221000", withExtension: "json")`
    static func poetSongRank221000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank221000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.222000", withExtension: "json")`
    static func poetSongRank222000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank222000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.223000", withExtension: "json")`
    static func poetSongRank223000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank223000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.224000", withExtension: "json")`
    static func poetSongRank224000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank224000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.225000", withExtension: "json")`
    static func poetSongRank225000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank225000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.226000", withExtension: "json")`
    static func poetSongRank226000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank226000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.227000", withExtension: "json")`
    static func poetSongRank227000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank227000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.228000", withExtension: "json")`
    static func poetSongRank228000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank228000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.229000", withExtension: "json")`
    static func poetSongRank229000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank229000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.23000", withExtension: "json")`
    static func poetSongRank23000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank23000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.230000", withExtension: "json")`
    static func poetSongRank230000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank230000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.231000", withExtension: "json")`
    static func poetSongRank231000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank231000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.232000", withExtension: "json")`
    static func poetSongRank232000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank232000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.233000", withExtension: "json")`
    static func poetSongRank233000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank233000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.234000", withExtension: "json")`
    static func poetSongRank234000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank234000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.235000", withExtension: "json")`
    static func poetSongRank235000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank235000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.236000", withExtension: "json")`
    static func poetSongRank236000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank236000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.237000", withExtension: "json")`
    static func poetSongRank237000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank237000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.238000", withExtension: "json")`
    static func poetSongRank238000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank238000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.239000", withExtension: "json")`
    static func poetSongRank239000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank239000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.24000", withExtension: "json")`
    static func poetSongRank24000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank24000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.240000", withExtension: "json")`
    static func poetSongRank240000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank240000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.241000", withExtension: "json")`
    static func poetSongRank241000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank241000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.242000", withExtension: "json")`
    static func poetSongRank242000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank242000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.243000", withExtension: "json")`
    static func poetSongRank243000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank243000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.244000", withExtension: "json")`
    static func poetSongRank244000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank244000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.245000", withExtension: "json")`
    static func poetSongRank245000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank245000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.246000", withExtension: "json")`
    static func poetSongRank246000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank246000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.247000", withExtension: "json")`
    static func poetSongRank247000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank247000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.248000", withExtension: "json")`
    static func poetSongRank248000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank248000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.249000", withExtension: "json")`
    static func poetSongRank249000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank249000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.25000", withExtension: "json")`
    static func poetSongRank25000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank25000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.250000", withExtension: "json")`
    static func poetSongRank250000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank250000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.251000", withExtension: "json")`
    static func poetSongRank251000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank251000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.252000", withExtension: "json")`
    static func poetSongRank252000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank252000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.253000", withExtension: "json")`
    static func poetSongRank253000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank253000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.254000", withExtension: "json")`
    static func poetSongRank254000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank254000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.26000", withExtension: "json")`
    static func poetSongRank26000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank26000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.27000", withExtension: "json")`
    static func poetSongRank27000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank27000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.28000", withExtension: "json")`
    static func poetSongRank28000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank28000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.29000", withExtension: "json")`
    static func poetSongRank29000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank29000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.3000", withExtension: "json")`
    static func poetSongRank3000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank3000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.30000", withExtension: "json")`
    static func poetSongRank30000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank30000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.31000", withExtension: "json")`
    static func poetSongRank31000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank31000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.32000", withExtension: "json")`
    static func poetSongRank32000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank32000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.33000", withExtension: "json")`
    static func poetSongRank33000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank33000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.34000", withExtension: "json")`
    static func poetSongRank34000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank34000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.35000", withExtension: "json")`
    static func poetSongRank35000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank35000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.36000", withExtension: "json")`
    static func poetSongRank36000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank36000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.37000", withExtension: "json")`
    static func poetSongRank37000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank37000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.38000", withExtension: "json")`
    static func poetSongRank38000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank38000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.39000", withExtension: "json")`
    static func poetSongRank39000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank39000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.4000", withExtension: "json")`
    static func poetSongRank4000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank4000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.40000", withExtension: "json")`
    static func poetSongRank40000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank40000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.41000", withExtension: "json")`
    static func poetSongRank41000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank41000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.42000", withExtension: "json")`
    static func poetSongRank42000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank42000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.43000", withExtension: "json")`
    static func poetSongRank43000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank43000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.44000", withExtension: "json")`
    static func poetSongRank44000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank44000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.45000", withExtension: "json")`
    static func poetSongRank45000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank45000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.46000", withExtension: "json")`
    static func poetSongRank46000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank46000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.47000", withExtension: "json")`
    static func poetSongRank47000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank47000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.48000", withExtension: "json")`
    static func poetSongRank48000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank48000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.49000", withExtension: "json")`
    static func poetSongRank49000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank49000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.5000", withExtension: "json")`
    static func poetSongRank5000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank5000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.50000", withExtension: "json")`
    static func poetSongRank50000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank50000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.51000", withExtension: "json")`
    static func poetSongRank51000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank51000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.52000", withExtension: "json")`
    static func poetSongRank52000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank52000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.53000", withExtension: "json")`
    static func poetSongRank53000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank53000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.54000", withExtension: "json")`
    static func poetSongRank54000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank54000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.55000", withExtension: "json")`
    static func poetSongRank55000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank55000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.56000", withExtension: "json")`
    static func poetSongRank56000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank56000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.57000", withExtension: "json")`
    static func poetSongRank57000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank57000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.58000", withExtension: "json")`
    static func poetSongRank58000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank58000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.59000", withExtension: "json")`
    static func poetSongRank59000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank59000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.6000", withExtension: "json")`
    static func poetSongRank6000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank6000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.60000", withExtension: "json")`
    static func poetSongRank60000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank60000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.61000", withExtension: "json")`
    static func poetSongRank61000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank61000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.62000", withExtension: "json")`
    static func poetSongRank62000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank62000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.63000", withExtension: "json")`
    static func poetSongRank63000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank63000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.64000", withExtension: "json")`
    static func poetSongRank64000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank64000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.65000", withExtension: "json")`
    static func poetSongRank65000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank65000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.66000", withExtension: "json")`
    static func poetSongRank66000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank66000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.67000", withExtension: "json")`
    static func poetSongRank67000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank67000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.68000", withExtension: "json")`
    static func poetSongRank68000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank68000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.69000", withExtension: "json")`
    static func poetSongRank69000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank69000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.7000", withExtension: "json")`
    static func poetSongRank7000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank7000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.70000", withExtension: "json")`
    static func poetSongRank70000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank70000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.71000", withExtension: "json")`
    static func poetSongRank71000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank71000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.72000", withExtension: "json")`
    static func poetSongRank72000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank72000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.73000", withExtension: "json")`
    static func poetSongRank73000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank73000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.74000", withExtension: "json")`
    static func poetSongRank74000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank74000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.75000", withExtension: "json")`
    static func poetSongRank75000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank75000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.76000", withExtension: "json")`
    static func poetSongRank76000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank76000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.77000", withExtension: "json")`
    static func poetSongRank77000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank77000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.78000", withExtension: "json")`
    static func poetSongRank78000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank78000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.79000", withExtension: "json")`
    static func poetSongRank79000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank79000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.8000", withExtension: "json")`
    static func poetSongRank8000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank8000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.80000", withExtension: "json")`
    static func poetSongRank80000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank80000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.81000", withExtension: "json")`
    static func poetSongRank81000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank81000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.82000", withExtension: "json")`
    static func poetSongRank82000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank82000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.83000", withExtension: "json")`
    static func poetSongRank83000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank83000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.84000", withExtension: "json")`
    static func poetSongRank84000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank84000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.85000", withExtension: "json")`
    static func poetSongRank85000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank85000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.86000", withExtension: "json")`
    static func poetSongRank86000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank86000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.87000", withExtension: "json")`
    static func poetSongRank87000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank87000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.88000", withExtension: "json")`
    static func poetSongRank88000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank88000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.89000", withExtension: "json")`
    static func poetSongRank89000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank89000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.9000", withExtension: "json")`
    static func poetSongRank9000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank9000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.90000", withExtension: "json")`
    static func poetSongRank90000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank90000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.91000", withExtension: "json")`
    static func poetSongRank91000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank91000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.92000", withExtension: "json")`
    static func poetSongRank92000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank92000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.93000", withExtension: "json")`
    static func poetSongRank93000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank93000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.94000", withExtension: "json")`
    static func poetSongRank94000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank94000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.95000", withExtension: "json")`
    static func poetSongRank95000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank95000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.96000", withExtension: "json")`
    static func poetSongRank96000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank96000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.97000", withExtension: "json")`
    static func poetSongRank97000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank97000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.98000", withExtension: "json")`
    static func poetSongRank98000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank98000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.song.rank.99000", withExtension: "json")`
    static func poetSongRank99000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetSongRank99000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.0", withExtension: "json")`
    static func poetTang0Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang0Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.1000", withExtension: "json")`
    static func poetTang1000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang1000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.10000", withExtension: "json")`
    static func poetTang10000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang10000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.11000", withExtension: "json")`
    static func poetTang11000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang11000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.12000", withExtension: "json")`
    static func poetTang12000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang12000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.13000", withExtension: "json")`
    static func poetTang13000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang13000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.14000", withExtension: "json")`
    static func poetTang14000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang14000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.15000", withExtension: "json")`
    static func poetTang15000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang15000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.16000", withExtension: "json")`
    static func poetTang16000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang16000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.17000", withExtension: "json")`
    static func poetTang17000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang17000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.18000", withExtension: "json")`
    static func poetTang18000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang18000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.19000", withExtension: "json")`
    static func poetTang19000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang19000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.2000", withExtension: "json")`
    static func poetTang2000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang2000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.20000", withExtension: "json")`
    static func poetTang20000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang20000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.21000", withExtension: "json")`
    static func poetTang21000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang21000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.22000", withExtension: "json")`
    static func poetTang22000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang22000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.23000", withExtension: "json")`
    static func poetTang23000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang23000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.24000", withExtension: "json")`
    static func poetTang24000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang24000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.25000", withExtension: "json")`
    static func poetTang25000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang25000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.26000", withExtension: "json")`
    static func poetTang26000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang26000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.27000", withExtension: "json")`
    static func poetTang27000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang27000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.28000", withExtension: "json")`
    static func poetTang28000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang28000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.29000", withExtension: "json")`
    static func poetTang29000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang29000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.3000", withExtension: "json")`
    static func poetTang3000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang3000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.30000", withExtension: "json")`
    static func poetTang30000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang30000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.31000", withExtension: "json")`
    static func poetTang31000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang31000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.32000", withExtension: "json")`
    static func poetTang32000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang32000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.33000", withExtension: "json")`
    static func poetTang33000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang33000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.34000", withExtension: "json")`
    static func poetTang34000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang34000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.35000", withExtension: "json")`
    static func poetTang35000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang35000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.36000", withExtension: "json")`
    static func poetTang36000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang36000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.37000", withExtension: "json")`
    static func poetTang37000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang37000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.38000", withExtension: "json")`
    static func poetTang38000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang38000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.39000", withExtension: "json")`
    static func poetTang39000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang39000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.4000", withExtension: "json")`
    static func poetTang4000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang4000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.40000", withExtension: "json")`
    static func poetTang40000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang40000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.41000", withExtension: "json")`
    static func poetTang41000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang41000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.42000", withExtension: "json")`
    static func poetTang42000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang42000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.43000", withExtension: "json")`
    static func poetTang43000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang43000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.44000", withExtension: "json")`
    static func poetTang44000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang44000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.45000", withExtension: "json")`
    static func poetTang45000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang45000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.46000", withExtension: "json")`
    static func poetTang46000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang46000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.47000", withExtension: "json")`
    static func poetTang47000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang47000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.48000", withExtension: "json")`
    static func poetTang48000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang48000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.49000", withExtension: "json")`
    static func poetTang49000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang49000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.5000", withExtension: "json")`
    static func poetTang5000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang5000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.50000", withExtension: "json")`
    static func poetTang50000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang50000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.51000", withExtension: "json")`
    static func poetTang51000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang51000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.52000", withExtension: "json")`
    static func poetTang52000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang52000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.53000", withExtension: "json")`
    static func poetTang53000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang53000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.54000", withExtension: "json")`
    static func poetTang54000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang54000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.55000", withExtension: "json")`
    static func poetTang55000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang55000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.56000", withExtension: "json")`
    static func poetTang56000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang56000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.57000", withExtension: "json")`
    static func poetTang57000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang57000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.6000", withExtension: "json")`
    static func poetTang6000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang6000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.7000", withExtension: "json")`
    static func poetTang7000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang7000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.8000", withExtension: "json")`
    static func poetTang8000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang8000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.9000", withExtension: "json")`
    static func poetTang9000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTang9000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.0", withExtension: "json")`
    static func poetTangRank0Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank0Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.1000", withExtension: "json")`
    static func poetTangRank1000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank1000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.10000", withExtension: "json")`
    static func poetTangRank10000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank10000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.11000", withExtension: "json")`
    static func poetTangRank11000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank11000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.12000", withExtension: "json")`
    static func poetTangRank12000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank12000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.13000", withExtension: "json")`
    static func poetTangRank13000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank13000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.14000", withExtension: "json")`
    static func poetTangRank14000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank14000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.15000", withExtension: "json")`
    static func poetTangRank15000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank15000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.16000", withExtension: "json")`
    static func poetTangRank16000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank16000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.17000", withExtension: "json")`
    static func poetTangRank17000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank17000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.18000", withExtension: "json")`
    static func poetTangRank18000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank18000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.19000", withExtension: "json")`
    static func poetTangRank19000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank19000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.2000", withExtension: "json")`
    static func poetTangRank2000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank2000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.20000", withExtension: "json")`
    static func poetTangRank20000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank20000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.21000", withExtension: "json")`
    static func poetTangRank21000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank21000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.22000", withExtension: "json")`
    static func poetTangRank22000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank22000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.23000", withExtension: "json")`
    static func poetTangRank23000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank23000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.24000", withExtension: "json")`
    static func poetTangRank24000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank24000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.25000", withExtension: "json")`
    static func poetTangRank25000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank25000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.26000", withExtension: "json")`
    static func poetTangRank26000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank26000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.27000", withExtension: "json")`
    static func poetTangRank27000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank27000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.28000", withExtension: "json")`
    static func poetTangRank28000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank28000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.29000", withExtension: "json")`
    static func poetTangRank29000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank29000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.3000", withExtension: "json")`
    static func poetTangRank3000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank3000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.30000", withExtension: "json")`
    static func poetTangRank30000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank30000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.31000", withExtension: "json")`
    static func poetTangRank31000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank31000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.32000", withExtension: "json")`
    static func poetTangRank32000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank32000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.33000", withExtension: "json")`
    static func poetTangRank33000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank33000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.34000", withExtension: "json")`
    static func poetTangRank34000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank34000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.35000", withExtension: "json")`
    static func poetTangRank35000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank35000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.36000", withExtension: "json")`
    static func poetTangRank36000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank36000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.37000", withExtension: "json")`
    static func poetTangRank37000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank37000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.38000", withExtension: "json")`
    static func poetTangRank38000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank38000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.39000", withExtension: "json")`
    static func poetTangRank39000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank39000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.4000", withExtension: "json")`
    static func poetTangRank4000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank4000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.40000", withExtension: "json")`
    static func poetTangRank40000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank40000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.41000", withExtension: "json")`
    static func poetTangRank41000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank41000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.42000", withExtension: "json")`
    static func poetTangRank42000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank42000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.43000", withExtension: "json")`
    static func poetTangRank43000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank43000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.44000", withExtension: "json")`
    static func poetTangRank44000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank44000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.45000", withExtension: "json")`
    static func poetTangRank45000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank45000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.46000", withExtension: "json")`
    static func poetTangRank46000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank46000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.47000", withExtension: "json")`
    static func poetTangRank47000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank47000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.48000", withExtension: "json")`
    static func poetTangRank48000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank48000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.49000", withExtension: "json")`
    static func poetTangRank49000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank49000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.5000", withExtension: "json")`
    static func poetTangRank5000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank5000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.50000", withExtension: "json")`
    static func poetTangRank50000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank50000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.51000", withExtension: "json")`
    static func poetTangRank51000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank51000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.52000", withExtension: "json")`
    static func poetTangRank52000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank52000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.53000", withExtension: "json")`
    static func poetTangRank53000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank53000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.54000", withExtension: "json")`
    static func poetTangRank54000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank54000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.55000", withExtension: "json")`
    static func poetTangRank55000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank55000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.56000", withExtension: "json")`
    static func poetTangRank56000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank56000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.57000", withExtension: "json")`
    static func poetTangRank57000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank57000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.6000", withExtension: "json")`
    static func poetTangRank6000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank6000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.7000", withExtension: "json")`
    static func poetTangRank7000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank7000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.8000", withExtension: "json")`
    static func poetTangRank8000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank8000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poet.tang.rank.9000", withExtension: "json")`
    static func poetTangRank9000Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTangRank9000Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "poetTest", withExtension: "json")`
    static func poetTestJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poetTestJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "qianjiashi", withExtension: "json")`
    static func qianjiashiJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qianjiashiJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "qianziwen", withExtension: "json")`
    static func qianziwenJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qianziwenJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sanzijing-new", withExtension: "json")`
    static func sanzijingNewJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sanzijingNewJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sanzijing-traditional", withExtension: "json")`
    static func sanzijingTraditionalJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sanzijingTraditionalJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "server", withExtension: "js")`
    static func serverJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.serverJs
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shenglvqimeng", withExtension: "json")`
    static func shenglvqimengJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shenglvqimengJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "shijing", withExtension: "json")`
    static func shijingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shijingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tangshisanbaishou", withExtension: "json")`
    static func tangshisanbaishouJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tangshisanbaishouJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "wenzimengqiu", withExtension: "json")`
    static func wenzimengqiuJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.wenzimengqiuJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "youxueqionglin", withExtension: "json")`
    static func youxueqionglinJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.youxueqionglinJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "yuanqu", withExtension: "json")`
    static func yuanquJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.yuanquJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "zengguangxianwen", withExtension: "json")`
    static func zengguangxianwenJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.zengguangxianwenJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "zhongyong", withExtension: "json")`
    static func zhongyongJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.zhongyongJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "zhuzijiaxun", withExtension: "json")`
    static func zhuzijiaxunJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.zhuzijiaxunJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `complaint_selected`.
    static let complaint_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "complaint_selected")
    /// Image `complaint_unSelected`.
    static let complaint_unSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "complaint_unSelected")
    /// Image `home_selected`.
    static let home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_selected")
    /// Image `home_unSelected`.
    static let home_unSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_unSelected")
    /// Image `mine_selected`.
    static let mine_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_selected")
    /// Image `mine_unSelected`.
    static let mine_unSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_unSelected")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "complaint_selected", bundle: ..., traitCollection: ...)`
    static func complaint_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.complaint_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "complaint_unSelected", bundle: ..., traitCollection: ...)`
    static func complaint_unSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.complaint_unSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_selected", bundle: ..., traitCollection: ...)`
    static func home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_unSelected", bundle: ..., traitCollection: ...)`
    static func home_unSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_unSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_selected", bundle: ..., traitCollection: ...)`
    static func mine_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_unSelected", bundle: ..., traitCollection: ...)`
    static func mine_unSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_unSelected, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
